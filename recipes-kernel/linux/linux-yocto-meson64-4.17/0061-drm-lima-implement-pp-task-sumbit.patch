From f1a7986c6fd1be13c6a74cc37969bba01881aa44 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Thu, 25 May 2017 21:47:23 +0800
Subject: [PATCH 061/134] drm/lima: implement pp task sumbit

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 drivers/gpu/drm/lima/lima_pp.c | 148 ++++++++++++++++++++++++++++++++++++++++-
 include/uapi/drm/lima_drm.h    |  46 ++++++++++++-
 2 files changed, 190 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/lima/lima_pp.c b/drivers/gpu/drm/lima/lima_pp.c
index 0d1795c..ba48f81 100644
--- a/drivers/gpu/drm/lima/lima_pp.c
+++ b/drivers/gpu/drm/lima/lima_pp.c
@@ -1,24 +1,166 @@
 #include "lima.h"
 
+#define LIMA_PP_FRAME                        0x0000
+#define LIMA_PP_RSW			     0x0004
+#define LIMA_PP_STACK			     0x0030
+#define LIMA_PP_STACK_SIZE		     0x0034
+#define LIMA_PP_ORIGIN_OFFSET_X	             0x0040
+#define LIMA_PP_WB(i) 			     (0x0100 * (i + 1))
+#define   LIMA_PP_WB_SOURCE_SELECT           0x0000
+#define	  LIMA_PP_WB_SOURCE_ADDR             0x0004
+
+#define LIMA_PP_VERSION                      0x1000
+#define LIMA_PP_CURRENT_REND_LIST_ADDR       0x1004
+#define	LIMA_PP_STATUS                       0x1008
+#define	  LIMA_PP_STATUS_RENDERING_ACTIVE    (1 << 0)
+#define	  LIMA_PP_STATUS_BUS_STOPPED	     (1 << 4)
+#define	LIMA_PP_CTRL                         0x100c
+#define   LIMA_PP_CTRL_STOP_BUS	             (1 << 0)
+#define	  LIMA_PP_CTRL_FLUSH_CACHES          (1 << 3)
+#define	  LIMA_PP_CTRL_FORCE_RESET           (1 << 5)
+#define	  LIMA_PP_CTRL_START_RENDERING       (1 << 6)
+#define	  LIMA_PP_CTRL_SOFT_RESET            (1 << 7)
+#define	LIMA_PP_INT_RAWSTAT                  0x1020
+#define	LIMA_PP_INT_CLEAR                    0x1024
+#define	LIMA_PP_INT_MASK                     0x1028
+#define	LIMA_PP_INT_STATUS                   0x102c
+#define	  LIMA_PP_IRQ_END_OF_FRAME           (1 << 0)
+#define	  LIMA_PP_IRQ_END_OF_TILE	     (1 << 1)
+#define	  LIMA_PP_IRQ_HANG		     (1 << 2)
+#define	  LIMA_PP_IRQ_FORCE_HANG	     (1 << 3)
+#define	  LIMA_PP_IRQ_BUS_ERROR		     (1 << 4)
+#define	  LIMA_PP_IRQ_BUS_STOP		     (1 << 5)
+#define	  LIMA_PP_IRQ_CNT_0_LIMIT	     (1 << 6)
+#define	  LIMA_PP_IRQ_CNT_1_LIMIT	     (1 << 7)
+#define	  LIMA_PP_IRQ_WRITE_BOUNDARY_ERROR   (1 << 8)
+#define	  LIMA_PP_IRQ_INVALID_PLIST_COMMAND  (1 << 9)
+#define	  LIMA_PP_IRQ_CALL_STACK_UNDERFLOW   (1 << 10)
+#define	  LIMA_PP_IRQ_CALL_STACK_OVERFLOW    (1 << 11)
+#define	  LIMA_PP_IRQ_RESET_COMPLETED	     (1 << 12)
+#define	LIMA_PP_WRITE_BOUNDARY_LOW           0x1044
+#define	LIMA_PP_BUS_ERROR_STATUS             0x1050
+#define	LIMA_PP_PERF_CNT_0_ENABLE            0x1080
+#define	LIMA_PP_PERF_CNT_0_SRC               0x1084
+#define	LIMA_PP_PERF_CNT_0_LIMIT             0x1088
+#define	LIMA_PP_PERF_CNT_0_VALUE             0x108c
+#define	LIMA_PP_PERF_CNT_1_ENABLE            0x10a0
+#define	LIMA_PP_PERF_CNT_1_SRC               0x10a4
+#define	LIMA_PP_PERF_CNT_1_LIMIT             0x10a8
+#define	LIMA_PP_PERF_CNT_1_VALUE             0x10ac
+#define LIMA_PP_PERFMON_CONTR                0x10b0
+#define LIMA_PP_PERFMON_BASE                 0x10b4
+
+#define LIMA_PP_IRQ_MASK_ALL                 \
+	(                                    \
+	 LIMA_PP_IRQ_END_OF_FRAME          | \
+	 LIMA_PP_IRQ_END_OF_TILE           | \
+	 LIMA_PP_IRQ_HANG                  | \
+	 LIMA_PP_IRQ_FORCE_HANG            | \
+	 LIMA_PP_IRQ_BUS_ERROR             | \
+	 LIMA_PP_IRQ_BUS_STOP              | \
+	 LIMA_PP_IRQ_CNT_0_LIMIT           | \
+	 LIMA_PP_IRQ_CNT_1_LIMIT           | \
+	 LIMA_PP_IRQ_WRITE_BOUNDARY_ERROR  | \
+	 LIMA_PP_IRQ_INVALID_PLIST_COMMAND | \
+	 LIMA_PP_IRQ_CALL_STACK_UNDERFLOW  | \
+	 LIMA_PP_IRQ_CALL_STACK_OVERFLOW   | \
+	 LIMA_PP_IRQ_RESET_COMPLETED)
+
+#define LIMA_PP_IRQ_MASK_USED                \
+	(                                    \
+	 LIMA_PP_IRQ_END_OF_FRAME          | \
+	 LIMA_PP_IRQ_FORCE_HANG            | \
+	 LIMA_PP_IRQ_BUS_ERROR             | \
+	 LIMA_PP_IRQ_WRITE_BOUNDARY_ERROR  | \
+	 LIMA_PP_IRQ_INVALID_PLIST_COMMAND | \
+	 LIMA_PP_IRQ_CALL_STACK_UNDERFLOW  | \
+	 LIMA_PP_IRQ_CALL_STACK_OVERFLOW)
+
+#define pp_write(reg, data) writel(data, pp->ip.iomem + LIMA_PP_##reg)
+#define pp_read(reg) readl(pp->ip.iomem + LIMA_PP_##reg)
+
+static irqreturn_t lima_pp_irq_handler(int irq, void *data)
+{
+	struct lima_pp *pp = data;
+	struct lima_device *dev = pp->ip.dev;
+	u32 state = pp_read(INT_STATUS);
+	u32 status = pp_read(STATUS);
+
+	dev_info_ratelimited(dev->dev, "pp irq state=%x status=%x\n", state, status);
+
+	if (state & LIMA_PP_IRQ_END_OF_FRAME)
+		lima_sched_pipe_task_done(&pp->pipe);
+
+	pp_write(INT_CLEAR, state);
+	return IRQ_NONE;
+}
+
 static int lima_pp_start_task(void *data, struct lima_sched_task *task)
 {
 	struct lima_pp *pp = data;
+	struct lima_device *dev = pp->ip.dev;
+	struct drm_lima_m400_pp_frame *frame = task->frame;
+	u32 *frame_reg = (void *)&frame->frame;
+	const int num_frame_reg = 23, num_wb_reg = 12;
+	int i, j;
+
+	dev_info(dev->dev, "lima start task pp %s %08x\n", pp->ip.name, pp_read(STATUS));
+
+	for (i = 0; i < num_frame_reg; i++)
+		writel(frame_reg[i], pp->ip.iomem + LIMA_PP_FRAME + i * 4);
+
+	for (i = 0; i < 3; i++) {
+		u32 *wb_reg = (void *)&frame->wb[i];
+		if (wb_reg[0]) {
+			for (j = 0; j < num_wb_reg; j++)
+				writel(wb_reg[j], pp->ip.iomem + LIMA_PP_WB(i) + j * 4);
+		}
+	}
 
-	DRM_INFO("lima start task pp %s\n", pp->ip.name);
-	dma_fence_signal(task->fence);
+	pp_write(CTRL, LIMA_PP_CTRL_START_RENDERING);
 	return 0;
 }
 
 static int lima_pp_reset(void *data)
 {
 	struct lima_pp *pp = data;
+	struct lima_device *dev = pp->ip.dev;
+	int timeout;
 
-	DRM_INFO("lima reset pp %s\n", pp->ip.name);
+	pp_write(INT_MASK, 0);
+	pp_write(INT_RAWSTAT, LIMA_PP_IRQ_MASK_ALL);
+	pp_write(CTRL, LIMA_PP_CTRL_SOFT_RESET);
+	for (timeout = 1000; timeout > 0; timeout--) {
+		if (!(pp_read(STATUS) & LIMA_PP_STATUS_RENDERING_ACTIVE) &&
+		    pp_read(INT_RAWSTAT) == LIMA_PP_IRQ_RESET_COMPLETED)
+			break;
+	}
+	if (!timeout) {
+		dev_err(dev->dev, "gp reset time out\n");
+		return -ETIMEDOUT;
+	}
+
+	pp_write(INT_CLEAR, LIMA_PP_IRQ_MASK_ALL);
+	pp_write(INT_MASK, LIMA_PP_IRQ_MASK_USED);
 	return 0;
 }
 
 int lima_pp_init(struct lima_pp *pp)
 {
+	struct lima_device *dev = pp->ip.dev;
+	int err;
+
+	err = lima_pp_reset(pp);
+	if (err)
+		return err;
+
+	err = devm_request_irq(dev->dev, pp->ip.irq, lima_pp_irq_handler, 0,
+			       pp->ip.name, pp);
+	if (err) {
+		dev_err(dev->dev, "pp %s fail to request irq\n", pp->ip.name);
+		return err;
+	}
+
 	pp->pipe.start_task = lima_pp_start_task;
 	pp->pipe.reset = lima_pp_reset;
 	pp->pipe.data = pp;
diff --git a/include/uapi/drm/lima_drm.h b/include/uapi/drm/lima_drm.h
index 40770c2..6b2520b 100644
--- a/include/uapi/drm/lima_drm.h
+++ b/include/uapi/drm/lima_drm.h
@@ -1,4 +1,5 @@
 /*
+ * Copyright (c) 2011-2013 Luc Verhaegen <libv@skynet.be>
  * Copyright (C) 2017 Lima Project
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
@@ -75,8 +76,51 @@ struct drm_lima_m400_gp_frame {
 	__u32 tile_heap_end;
 };
 
+struct drm_lima_m400_pp_frame_reg {
+	__u32 plbu_array_address;
+	__u32 render_address;
+	__u32 unused_0;
+	__u32 flags;
+	__u32 clear_value_depth;
+	__u32 clear_value_stencil;
+	__u32 clear_value_color;
+	__u32 clear_value_color_1;
+	__u32 clear_value_color_2;
+	__u32 clear_value_color_3;
+	__u32 width;
+	__u32 height;
+	__u32 fragment_stack_address;
+	__u32 fragment_stack_size;
+	__u32 unused_1;
+	__u32 unused_2;
+	__u32 one;
+	__u32 supersampled_height;
+	__u32 dubya;
+	__u32 onscreen;
+	__u32 blocking;
+	__u32 scale;
+	__u32 foureight;
+	__u32 pad;
+};
+
+struct drm_lima_m400_pp_wb_reg {
+	__u32 type;
+	__u32 address;
+	__u32 pixel_format;
+	__u32 downsample_factor;
+	__u32 pixel_layout;
+	__u32 pitch;
+	__u32 mrt_bits;
+	__u32 mrt_pitch;
+	__u32 zero;
+	__u32 unused0;
+	__u32 unused1;
+	__u32 unused2;
+};
+
 struct drm_lima_m400_pp_frame {
-	__u32 dummy;
+	struct drm_lima_m400_pp_frame_reg frame;
+	struct drm_lima_m400_pp_wb_reg wb[3];
 };
 
 struct drm_lima_gem_submit {
-- 
2.0.1

