From 978499f2f115c1707a34080b3aa86dd23c9f54e5 Mon Sep 17 00:00:00 2001
From: Maxime Jourdan <maxi.jourdan@wanadoo.fr>
Date: Mon, 9 Apr 2018 16:28:36 +0200
Subject: [PATCH] meson: vdec: hevc: Fetch and process RPM

RPM is a part within the workspace that gets filled with many
information extracted from the bitstream by the parser.

This commit allows us to check things like the parsed frame size
and display it.

There's also some WIP towards processing segment header..

Much code from AML was copied (such as the rpm_param union..)
---
 drivers/media/platform/meson/vdec/codec_hevc.c | 271 ++++++++++++++++++++++++-
 1 file changed, 269 insertions(+), 2 deletions(-)

diff --git a/drivers/media/platform/meson/vdec/codec_hevc.c b/drivers/media/platform/meson/vdec/codec_hevc.c
index a504af1..2125fa3 100644
--- a/drivers/media/platform/meson/vdec/codec_hevc.c
+++ b/drivers/media/platform/meson/vdec/codec_hevc.c
@@ -131,6 +131,155 @@ static const u16 parser_cmd[] = {
 	0x7C00
 };
 
+#define RPM_BEGIN                                              0x100
+#define modification_list_cur                                  0x140
+#define RPM_END                                                0x180
+
+union rpm_param {
+	struct {
+		unsigned short data[RPM_END - RPM_BEGIN];
+	} l;
+	struct {
+		/* from ucode lmem, do not change this struct */
+		unsigned short CUR_RPS[0x10];
+		unsigned short num_ref_idx_l0_active;
+		unsigned short num_ref_idx_l1_active;
+		unsigned short slice_type;
+		unsigned short slice_temporal_mvp_enable_flag;
+		unsigned short dependent_slice_segment_flag;
+		unsigned short slice_segment_address;
+		unsigned short num_title_rows_minus1;
+		unsigned short pic_width_in_luma_samples;
+		unsigned short pic_height_in_luma_samples;
+		unsigned short log2_min_coding_block_size_minus3;
+		unsigned short log2_diff_max_min_coding_block_size;
+		unsigned short log2_max_pic_order_cnt_lsb_minus4;
+		unsigned short POClsb;
+		unsigned short collocated_from_l0_flag;
+		unsigned short collocated_ref_idx;
+		unsigned short log2_parallel_merge_level;
+		unsigned short five_minus_max_num_merge_cand;
+		unsigned short sps_num_reorder_pics_0;
+		unsigned short modification_flag;
+		unsigned short tiles_enabled_flag;
+		unsigned short num_tile_columns_minus1;
+		unsigned short num_tile_rows_minus1;
+		unsigned short tile_width[4];
+		unsigned short tile_height[4];
+		unsigned short misc_flag0;
+		unsigned short pps_beta_offset_div2;
+		unsigned short pps_tc_offset_div2;
+		unsigned short slice_beta_offset_div2;
+		unsigned short slice_tc_offset_div2;
+		unsigned short pps_cb_qp_offset;
+		unsigned short pps_cr_qp_offset;
+		unsigned short first_slice_segment_in_pic_flag;
+		unsigned short m_temporalId;
+		unsigned short m_nalUnitType;
+		unsigned short vui_num_units_in_tick_hi;
+		unsigned short vui_num_units_in_tick_lo;
+		unsigned short vui_time_scale_hi;
+		unsigned short vui_time_scale_lo;
+		unsigned short bit_depth;
+		unsigned short profile_etc;
+		unsigned short sei_frame_field_info;
+		unsigned short video_signal_type;
+		unsigned short modification_list[0x20];
+		unsigned short conformance_window_flag;
+		unsigned short conf_win_left_offset;
+		unsigned short conf_win_right_offset;
+		unsigned short conf_win_top_offset;
+		unsigned short conf_win_bottom_offset;
+		unsigned short chroma_format_idc;
+		unsigned short color_description;
+		unsigned short aspect_ratio_idc;
+		unsigned short sar_width;
+		unsigned short sar_height;
+	} p;
+};
+
+enum NalUnitType {
+	NAL_UNIT_CODED_SLICE_TRAIL_N = 0,	/* 0 */
+	NAL_UNIT_CODED_SLICE_TRAIL_R,	/* 1 */
+
+	NAL_UNIT_CODED_SLICE_TSA_N,	/* 2 */
+	/* Current name in the spec: TSA_R */
+	NAL_UNIT_CODED_SLICE_TLA,	/* 3 */
+
+	NAL_UNIT_CODED_SLICE_STSA_N,	/* 4 */
+	NAL_UNIT_CODED_SLICE_STSA_R,	/* 5 */
+
+	NAL_UNIT_CODED_SLICE_RADL_N,	/* 6 */
+	/* Current name in the spec: RADL_R */
+	NAL_UNIT_CODED_SLICE_DLP,	/* 7 */
+
+	NAL_UNIT_CODED_SLICE_RASL_N,	/* 8 */
+	/* Current name in the spec: RASL_R */
+	NAL_UNIT_CODED_SLICE_TFD,	/* 9 */
+
+	NAL_UNIT_RESERVED_10,
+	NAL_UNIT_RESERVED_11,
+	NAL_UNIT_RESERVED_12,
+	NAL_UNIT_RESERVED_13,
+	NAL_UNIT_RESERVED_14,
+	NAL_UNIT_RESERVED_15,
+
+	/* Current name in the spec: BLA_W_LP */
+	NAL_UNIT_CODED_SLICE_BLA,	/* 16 */
+	/* Current name in the spec: BLA_W_DLP */
+	NAL_UNIT_CODED_SLICE_BLANT,	/* 17 */
+	NAL_UNIT_CODED_SLICE_BLA_N_LP,	/* 18 */
+	/* Current name in the spec: IDR_W_DLP */
+	NAL_UNIT_CODED_SLICE_IDR,	/* 19 */
+	NAL_UNIT_CODED_SLICE_IDR_N_LP,	/* 20 */
+	NAL_UNIT_CODED_SLICE_CRA,	/* 21 */
+	NAL_UNIT_RESERVED_22,
+	NAL_UNIT_RESERVED_23,
+
+	NAL_UNIT_RESERVED_24,
+	NAL_UNIT_RESERVED_25,
+	NAL_UNIT_RESERVED_26,
+	NAL_UNIT_RESERVED_27,
+	NAL_UNIT_RESERVED_28,
+	NAL_UNIT_RESERVED_29,
+	NAL_UNIT_RESERVED_30,
+	NAL_UNIT_RESERVED_31,
+
+	NAL_UNIT_VPS,		/* 32 */
+	NAL_UNIT_SPS,		/* 33 */
+	NAL_UNIT_PPS,		/* 34 */
+	NAL_UNIT_ACCESS_UNIT_DELIMITER,	/* 35 */
+	NAL_UNIT_EOS,		/* 36 */
+	NAL_UNIT_EOB,		/* 37 */
+	NAL_UNIT_FILLER_DATA,	/* 38 */
+	NAL_UNIT_SEI,		/* 39 Prefix SEI */
+	NAL_UNIT_SEI_SUFFIX,	/* 40 Suffix SEI */
+	NAL_UNIT_RESERVED_41,
+	NAL_UNIT_RESERVED_42,
+	NAL_UNIT_RESERVED_43,
+	NAL_UNIT_RESERVED_44,
+	NAL_UNIT_RESERVED_45,
+	NAL_UNIT_RESERVED_46,
+	NAL_UNIT_RESERVED_47,
+	NAL_UNIT_UNSPECIFIED_48,
+	NAL_UNIT_UNSPECIFIED_49,
+	NAL_UNIT_UNSPECIFIED_50,
+	NAL_UNIT_UNSPECIFIED_51,
+	NAL_UNIT_UNSPECIFIED_52,
+	NAL_UNIT_UNSPECIFIED_53,
+	NAL_UNIT_UNSPECIFIED_54,
+	NAL_UNIT_UNSPECIFIED_55,
+	NAL_UNIT_UNSPECIFIED_56,
+	NAL_UNIT_UNSPECIFIED_57,
+	NAL_UNIT_UNSPECIFIED_58,
+	NAL_UNIT_UNSPECIFIED_59,
+	NAL_UNIT_UNSPECIFIED_60,
+	NAL_UNIT_UNSPECIFIED_61,
+	NAL_UNIT_UNSPECIFIED_62,
+	NAL_UNIT_UNSPECIFIED_63,
+	NAL_UNIT_INVALID,
+};
+
 struct codec_hevc {
 	/* Buffer for the HEVC Workspace */
 	void      *workspace_vaddr;
@@ -144,6 +293,18 @@ struct codec_hevc {
 	void      *frame_mmu_vaddr;
 	dma_addr_t frame_mmu_paddr;
 
+	/* Contains many information parsed from the bitstream */
+	union rpm_param rpm_param;
+
+	/* Information computed from the RPM */
+	u32 lcu_size; // Largest Coding Unit
+
+	/* Current Picture Order Count */
+	u32 curr_poc;
+
+	/* ?? */
+	u32 iPrevTid0POC;
+
 	/* Housekeeping thread for marking buffers to DONE
 	 * and recycling them into the hardware
 	 */
@@ -223,6 +384,7 @@ static int codec_hevc_setup_workspace(struct vdec_session *sess)
 
 	/* Setup Workspace */
 	writel_relaxed(hevc->workspace_paddr + IPP_OFFSET, core->dos_base + HEVCD_IPP_LINEBUFF_BASE);
+	writel_relaxed(hevc->workspace_paddr + RPM_OFFSET, core->dos_base + HEVC_RPM_BUFFER);
 	writel_relaxed(hevc->workspace_paddr + SH_TM_RPS_OFFSET, core->dos_base + HEVC_SHORT_TERM_RPS);
 	writel_relaxed(hevc->workspace_paddr + VPS_OFFSET, core->dos_base + HEVC_VPS_BUFFER);
 	writel_relaxed(hevc->workspace_paddr + SPS_OFFSET, core->dos_base + HEVC_SPS_BUFFER);
@@ -236,7 +398,6 @@ static int codec_hevc_setup_workspace(struct vdec_session *sess)
 	writel_relaxed(hevc->workspace_paddr + SCALELUT_OFFSET, core->dos_base + HEVC_SCALELUT);
 	writel_relaxed(hevc->workspace_paddr + DBLK_PARA_OFFSET, core->dos_base + HEVC_DBLK_CFG4);
 	writel_relaxed(hevc->workspace_paddr + DBLK_DATA_OFFSET, core->dos_base + HEVC_DBLK_CFG5);
-	//writel_relaxed(hevc->workspace_paddr + LMEM_OFFSET, core->dos_base + LMEM_DUMP_ADR);
 
 	return 0;
 }
@@ -305,7 +466,7 @@ static int codec_hevc_start(struct vdec_session *sess)
 	/* disable PSCALE for hardware sharing */
 	writel_relaxed(0, core->dos_base + HEVC_PSCALE_CTRL);
 	/* Let the uCode do all the parsing */
-	writel_relaxed((1 << 17) | 0xc, core->dos_base + NAL_SEARCH_CTL);
+	writel_relaxed(0xc, core->dos_base + NAL_SEARCH_CTL);
 
 	/*WRITE_VREG(NAL_SEARCH_CTL,
 	READ_VREG(NAL_SEARCH_CTL)
@@ -354,12 +515,116 @@ static int codec_hevc_stop(struct vdec_session *sess)
 		hevc->frame_mmu_vaddr = 0;
 	}
 
+	if (hevc->aux_vaddr) {
+		dma_free_coherent(core->dev, SIZE_AUX, hevc->aux_vaddr, hevc->aux_paddr);
+		hevc->aux_vaddr = 0;
+	}
+
 	kfree(hevc);
 	sess->priv = 0;
 
 	return 0;
 }
 
+static void codec_hevc_prepare_new_frame(struct vdec_session *sess) {
+
+}
+
+static void codec_hevc_set_iPrevTid0POC(struct vdec_session *sess) {
+	struct codec_hevc *hevc = sess->priv;
+	u32 nal_unit_type = hevc->rpm_param.p.m_nalUnitType;
+	u32 temporal_id = hevc->rpm_param.p.m_temporalId;
+
+	if (nal_unit_type == NAL_UNIT_CODED_SLICE_IDR ||
+	    nal_unit_type == NAL_UNIT_CODED_SLICE_IDR_N_LP) {
+		hevc->curr_poc = 0;
+		if ((temporal_id - 1) == 0)
+			hevc->iPrevTid0POC = hevc->curr_poc;
+	} else {
+		int iMaxPOClsb =
+			1 << (hevc->rpm_param.p.
+			log2_max_pic_order_cnt_lsb_minus4 + 4);
+		int iPrevPOClsb;
+		int iPrevPOCmsb;
+		int iPOCmsb;
+		int iPOClsb = hevc->rpm_param.p.POClsb;
+
+		iPrevPOClsb = hevc->iPrevTid0POC % iMaxPOClsb;
+		iPrevPOCmsb = hevc->iPrevTid0POC - iPrevPOClsb;
+
+		if ((iPOClsb < iPrevPOClsb)
+			&& ((iPrevPOClsb - iPOClsb) >=
+				(iMaxPOClsb / 2)))
+			iPOCmsb = iPrevPOCmsb + iMaxPOClsb;
+		else if ((iPOClsb > iPrevPOClsb)
+				 && ((iPOClsb - iPrevPOClsb) >
+					 (iMaxPOClsb / 2)))
+			iPOCmsb = iPrevPOCmsb - iMaxPOClsb;
+		else
+			iPOCmsb = iPrevPOCmsb;
+
+		if (nal_unit_type == NAL_UNIT_CODED_SLICE_BLA   ||
+		    nal_unit_type == NAL_UNIT_CODED_SLICE_BLANT ||
+		    nal_unit_type == NAL_UNIT_CODED_SLICE_BLA_N_LP) {
+			/* For BLA picture types, POCmsb is set to 0. */
+			iPOCmsb = 0;
+		}
+		hevc->curr_poc = (iPOCmsb + iPOClsb);
+		if ((temporal_id - 1) == 0)
+			hevc->iPrevTid0POC = hevc->curr_poc;
+	}
+}
+
+static void codec_hevc_process_segment_header(struct vdec_session *sess)
+{
+	struct codec_hevc *hevc = sess->priv;
+	u32 nal_unit_type = hevc->rpm_param.p.m_nalUnitType;
+	u32 temporal_id = hevc->rpm_param.p.m_temporalId;
+	u32 slice_segment_address = hevc->rpm_param.p.slice_segment_address;
+
+	printk("nal_unit_type = %u ; temporal_id = %u ; slice_seg_addr = %u\n",
+		nal_unit_type, temporal_id, slice_segment_address);
+
+	codec_hevc_set_iPrevTid0POC(sess);
+
+	/* ? First slice: new frame ? */
+	if (slice_segment_address == 0)
+		codec_hevc_prepare_new_frame(sess);
+}
+
+/* The RPM raw data isn't really usable in its state.
+ * There are many hi/lo fields, others must be processed
+ * to actually get the relevant information, etc.
+ */
+static void codec_hevc_process_rpm(struct codec_hevc *hevc)
+{
+	union rpm_param *rpm_param = &hevc->rpm_param;
+
+	hevc->lcu_size = 1 << (rpm_param->p.log2_min_coding_block_size_minus3 +
+		3 + rpm_param->p.log2_diff_max_min_coding_block_size);
+}
+
+/* The RPM section within the workspace contains
+ * many information regarding the parsed bitstream
+ */
+static void codec_hevc_fetch_rpm(struct vdec_session *sess)
+{
+	struct codec_hevc *hevc = sess->priv;
+	u16 *rpm_vaddr = hevc->workspace_vaddr + RPM_OFFSET;
+	int i;
+
+	for (i = 0; i < (RPM_END - RPM_BEGIN); i += 4) {
+		int ii;
+		for (ii = 0; ii < 4; ii++) {
+			hevc->rpm_param.l.data[i + ii] = rpm_vaddr[i + 3 - ii];
+		}
+	}
+
+	codec_hevc_process_rpm(hevc);
+
+	printk("Size: %ux%u\n", hevc->rpm_param.p.pic_width_in_luma_samples,  hevc->rpm_param.p.pic_height_in_luma_samples);
+}
+
 static irqreturn_t codec_hevc_isr(struct vdec_session *sess)
 {
 	u32 dec_status;
@@ -370,6 +635,8 @@ static irqreturn_t codec_hevc_isr(struct vdec_session *sess)
 
 	if (dec_status == HEVC_SLICE_SEGMENT_DONE) {
 		writel_relaxed(readl_relaxed(core->dos_base + HEVC_WAIT_FLAG) | 2, core->dos_base + HEVC_WAIT_FLAG);
+		codec_hevc_fetch_rpm(sess);
+		codec_hevc_process_segment_header(sess);
 		writel_relaxed(HEVC_CODED_SLICE_SEGMENT_DAT, core->dos_base + HEVC_DEC_STATUS_REG);
 		writel_relaxed(AMRISC_MAIN_REQ, core->dos_base + HEVC_MCPU_INTR_REQ);
 	}
