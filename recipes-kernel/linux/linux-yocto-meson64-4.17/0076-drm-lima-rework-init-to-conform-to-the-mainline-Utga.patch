From 42296376747437bd639dfa24abc2fdcceeffc152 Mon Sep 17 00:00:00 2001
From: Heiko Stuebner <heiko@sntech.de>
Date: Sun, 3 Sep 2017 01:02:00 +0200
Subject: [PATCH 076/134] drm/lima: rework init to conform to the mainline
 Utgard binding

v2:
  (Qiang Yu)
  1. move pp num find to lima_device
  2. keep lima_ip.iomem

Meanwhile a generic devicetree binding for Utgard Malis was accepted
into the upstream kernel, so the lima driver should conform to this
one and not some out-of-tree binding.

Signed-off-by: Heiko Stuebner <heiko@sntech.de>
Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 drivers/gpu/drm/lima/lima.h        |  1 +
 drivers/gpu/drm/lima/lima_device.c | 99 ++++++++++++++++++++------------------
 drivers/gpu/drm/lima/lima_drv.c    |  2 +-
 3 files changed, 54 insertions(+), 48 deletions(-)

diff --git a/drivers/gpu/drm/lima/lima.h b/drivers/gpu/drm/lima/lima.h
index 67aa926..cb60709c 100644
--- a/drivers/gpu/drm/lima/lima.h
+++ b/drivers/gpu/drm/lima/lima.h
@@ -92,6 +92,7 @@ struct lima_device {
 	struct platform_device *pdev;
 
 	enum lima_gpu_type gpu_type;
+	void __iomem *iomem;
 
 	struct clk *clk_bus;
 	struct clk *clk_gpu;
diff --git a/drivers/gpu/drm/lima/lima_device.c b/drivers/gpu/drm/lima/lima_device.c
index 194c301..6e53d3c 100644
--- a/drivers/gpu/drm/lima/lima_device.c
+++ b/drivers/gpu/drm/lima/lima_device.c
@@ -4,6 +4,13 @@
 
 #include "lima.h"
 
+#define LIMA_GP_BASE           0x0000
+#define LIMA_L2_BASE           0x1000
+#define LIMA_PMU_BASE          0x2000
+#define LIMA_GPMMU_BASE        0x3000
+#define LIMA_PPMMU_BASE(i)     (0x4000 + 0x1000 * (i))
+#define LIMA_PP_BASE(i)        (0x8000 + 0x2000 * (i))
+
 static int lima_clk_init(struct lima_device *dev)
 {
 	int err;
@@ -11,13 +18,13 @@ static int lima_clk_init(struct lima_device *dev)
 
 	dev->clk_bus = devm_clk_get(dev->dev, "bus");
 	if (IS_ERR(dev->clk_bus)) {
-		dev_err(dev->dev, "get bus clk fail %ld\n", PTR_ERR(dev->clk_bus));
+		dev_err(dev->dev, "get bus clk failed %ld\n", PTR_ERR(dev->clk_bus));
 		return PTR_ERR(dev->clk_bus);
 	}
 
-	dev->clk_gpu = devm_clk_get(dev->dev, "gpu");
+	dev->clk_gpu = devm_clk_get(dev->dev, "core");
 	if (IS_ERR(dev->clk_gpu)) {
-		dev_err(dev->dev, "get gpu clk fail %ld\n", PTR_ERR(dev->clk_gpu));
+		dev_err(dev->dev, "get core clk failed %ld\n", PTR_ERR(dev->clk_gpu));
 		return PTR_ERR(dev->clk_gpu);
 	}
 
@@ -32,7 +39,7 @@ static int lima_clk_init(struct lima_device *dev)
 	if ((err = clk_prepare_enable(dev->clk_gpu)))
 		goto error_out0;
 
-	dev->reset = devm_reset_control_get(dev->dev, "ahb");
+	dev->reset = devm_reset_control_get(dev->dev, NULL);
 	if (IS_ERR(dev->reset)) {
 		err = PTR_ERR(dev->reset);
 		goto error_out1;
@@ -58,9 +65,13 @@ static void lima_clk_fini(struct lima_device *dev)
 }
 
 static int lima_init_ip(struct lima_device *dev, const char *name,
-			struct lima_ip *ip)
+			struct lima_ip *ip, u32 offset)
 {
-	struct resource *res;
+	ip->iomem = dev->iomem + offset;
+	ip->dev = dev;
+
+	strncpy(ip->name, name, LIMA_IP_MAX_NAME_LEN);
+	ip->name[LIMA_IP_MAX_NAME_LEN - 1] = '\0';
 
 	if (ip->irq == 0) {
 		ip->irq = platform_get_irq_byname(dev->pdev, name);
@@ -70,22 +81,6 @@ static int lima_init_ip(struct lima_device *dev, const char *name,
 		}
 	}
 
-	res = platform_get_resource_byname(dev->pdev, IORESOURCE_MEM, name);
-	if (!res) {
-		dev_err(dev->dev, "fail to get iomem %s\n", name);
-		return -EINVAL;
-	}
-
-	ip->iomem = devm_ioremap_resource(dev->dev, res);
-	if (IS_ERR(ip->iomem)) {
-		dev_err(dev->dev, "fail to ioremap iomem %s\n", name);
-		return PTR_ERR(ip->iomem);
-	}
-
-	ip->dev = dev;
-	strncpy(ip->name, name, LIMA_IP_MAX_NAME_LEN);
-	ip->name[LIMA_IP_MAX_NAME_LEN - 1] = '\0';
-
 	return 0;
 }
 
@@ -98,11 +93,11 @@ static int lima_gp_group_init(struct lima_device *dev)
 	if (!gp)
 		return -ENOMEM;
 
-	if ((err = lima_init_ip(dev, "gp-mmu", &gp->mmu.ip)) ||
+	if ((err = lima_init_ip(dev, "gpmmu", &gp->mmu.ip, LIMA_GPMMU_BASE)) ||
 	    (err = lima_mmu_init(&gp->mmu)))
 		goto err_out0;
 
-	if ((err = lima_init_ip(dev, "gp", &gp->ip)) ||
+	if ((err = lima_init_ip(dev, "gp", &gp->ip, LIMA_GP_BASE)) ||
 	    (err = lima_gp_init(gp)))
 		goto err_out1;
 
@@ -123,29 +118,29 @@ static int lima_gp_group_init(struct lima_device *dev)
 	return err;
 }
 
-static int lima_pp_group_init(struct lima_device *dev, int n)
+static int lima_pp_group_init(struct lima_device *dev)
 {
 	int err, i;
 	struct lima_pp *pp;
-	char pp_name[] = "pp0", pp_mmu_name[] = "pp0-mmu";
+	char pp_name[] = "pp0", pp_mmu_name[] = "pp0mmu";
 
 	pp = kzalloc(sizeof(*pp), GFP_KERNEL);
 	if (!pp)
 		return -ENOMEM;
 	dev->pp = pp;
 
-	for (i = 0; i < n; i++) {
+	for (i = 0; i < dev->num_pp; i++) {
 		struct lima_pp_core *core = pp->core + pp->num_core;
 
 		pp_name[2] = '0' + i; pp_mmu_name[2] = '0' + i;
 
-		if ((err = lima_init_ip(dev, pp_mmu_name, &core->mmu.ip)) ||
+		if ((err = lima_init_ip(dev, pp_mmu_name, &core->mmu.ip, LIMA_PPMMU_BASE(i))) ||
 		    (err = lima_mmu_init(&core->mmu))) {
 			memset(core, 0, sizeof(*core));
 			continue;
 		}
 
-		if ((err = lima_init_ip(dev, pp_name, &core->ip)) ||
+		if ((err = lima_init_ip(dev, pp_name, &core->ip, LIMA_PP_BASE(i))) ||
 		    (err = lima_pp_core_init(core))) {
 			lima_mmu_fini(&core->mmu);
 			memset(core, 0, sizeof(*core));
@@ -155,8 +150,8 @@ static int lima_pp_group_init(struct lima_device *dev, int n)
 		pp->num_core++;
 	}
 
-	if (pp->num_core != n)
-		dev_warn(dev->dev, "bringup pp %d/%d\n", pp->num_core, n);
+	if (pp->num_core != dev->num_pp)
+		dev_warn(dev->dev, "bringup pp %d/%d\n", pp->num_core, dev->num_pp);
 
 	if (pp->num_core == 0)
 		return -ENODEV;
@@ -173,25 +168,15 @@ static int lima_pp_group_init(struct lima_device *dev, int n)
 
 int lima_device_init(struct lima_device *ldev)
 {
-	int err;
+	int err, i;
 	struct device_node *np;
-	u32 num_pp;
+	struct resource *res;
 
 	dma_set_coherent_mask(ldev->dev, DMA_BIT_MASK(32));
 
 	ldev->gpu_type = GPU_MALI400;
 
 	np = ldev->dev->of_node;
-	err = of_property_read_u32(np, "num-pp", &num_pp);
-	if (err) {
-		dev_err(ldev->dev, "no num-pp property defined\n");
-		return err;
-	}
-	if (num_pp > LIMA_MAX_PP) {
-		dev_err(ldev->dev, "too many pp %u\n", num_pp);
-		return -EINVAL;
-	}
-	ldev->num_pp = num_pp;
 
 	err = lima_clk_init(ldev);
 	if (err) {
@@ -205,16 +190,36 @@ int lima_device_init(struct lima_device *ldev)
 		goto err_out;
 	}
 
+	res = platform_get_resource(ldev->pdev, IORESOURCE_MEM, 0);
+	ldev->iomem = devm_ioremap_resource(ldev->dev, res);
+	if (IS_ERR(ldev->iomem)) {
+		dev_err(ldev->dev, "fail to ioremap iomem\n");
+	        err = PTR_ERR(ldev->iomem);
+		goto err_out;
+	}
+
+	/* Get the number of PPs */
+	for (i = 0; i < LIMA_MAX_PP; i++) {
+		char pp_name[] = "pp0";
+		pp_name[2] = '0' + i;
+		if (platform_get_irq_byname(ldev->pdev, pp_name) < 0)
+			break;
+	}
+	dev_info(ldev->dev, "found %d PPs\n", i);
+	ldev->num_pp = i;
+
 	ldev->pmu = kzalloc(sizeof(*ldev->pmu), GFP_KERNEL);
 	if (!ldev->pmu) {
 		err = -ENOMEM;
 		goto err_out;
 	}
-	if ((err = lima_init_ip(ldev, "pmu", &ldev->pmu->ip)) ||
+
+	/* pmu is optional and not always present */
+	if ((err = lima_init_ip(ldev, "pmu", &ldev->pmu->ip, LIMA_PMU_BASE)) ||
 	    (err = lima_pmu_init(ldev->pmu))) {
+		dev_info(ldev->dev, "no PMU present\n");
 		kfree(ldev->pmu);
 		ldev->pmu = NULL;
-		goto err_out;
 	}
 
 	ldev->l2_cache = kzalloc(sizeof(*ldev->l2_cache), GFP_KERNEL);
@@ -223,7 +228,7 @@ int lima_device_init(struct lima_device *ldev)
 		goto err_out;
 	}
 	ldev->l2_cache->ip.irq = -1;
-	if ((err = lima_init_ip(ldev, "l2-cache", &ldev->l2_cache->ip)) ||
+	if ((err = lima_init_ip(ldev, "l2-cache", &ldev->l2_cache->ip, LIMA_L2_BASE)) ||
 	    (err = lima_l2_cache_init(ldev->l2_cache))) {
 		kfree(ldev->l2_cache);
 		ldev->l2_cache = NULL;
@@ -233,7 +238,7 @@ int lima_device_init(struct lima_device *ldev)
 	if ((err = lima_gp_group_init(ldev)))
 		goto err_out;
 
-	if ((err = lima_pp_group_init(ldev, num_pp)))
+	if ((err = lima_pp_group_init(ldev)))
 		goto err_out;
 
 	return 0;
diff --git a/drivers/gpu/drm/lima/lima_drv.c b/drivers/gpu/drm/lima/lima_drv.c
index ae7bbb6..89c2ec7 100644
--- a/drivers/gpu/drm/lima/lima_drv.c
+++ b/drivers/gpu/drm/lima/lima_drv.c
@@ -273,7 +273,7 @@ static int lima_pdev_remove(struct platform_device *pdev)
 }
 
 static const struct of_device_id dt_match[] = {
-	{ .compatible = "arm,mali400" },
+	{ .compatible = "arm,mali-400" },
 	{}
 };
 MODULE_DEVICE_TABLE(of, dt_match);
-- 
2.0.1

