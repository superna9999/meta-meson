From 9bad21b56efb2450a22b5c7796a83f4fd1c3277b Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Thu, 8 Feb 2018 10:00:36 +0800
Subject: [PATCH 102/134] drm/lima: adjust sched pipe task function pointers

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 drivers/gpu/drm/lima/lima_drv.c   | 35 ++++++------------------
 drivers/gpu/drm/lima/lima_gp.c    | 56 ++++++++++++++++++++++++---------------
 drivers/gpu/drm/lima/lima_pp.c    | 46 +++++++++++++++++++++++---------
 drivers/gpu/drm/lima/lima_sched.c |  9 ++++---
 drivers/gpu/drm/lima/lima_sched.h |  6 +++--
 5 files changed, 86 insertions(+), 66 deletions(-)

diff --git a/drivers/gpu/drm/lima/lima_drv.c b/drivers/gpu/drm/lima/lima_drv.c
index ac9783d..9e92e48 100644
--- a/drivers/gpu/drm/lima/lima_drv.c
+++ b/drivers/gpu/drm/lima/lima_drv.c
@@ -67,25 +67,15 @@ static int lima_ioctl_gem_submit(struct drm_device *dev, void *data, struct drm_
 	int err = 0;
 	void *frame;
 	struct lima_device *ldev = to_lima_dev(dev);
+	struct lima_sched_pipe *pipe;
 
 	if (args->pipe >= ARRAY_SIZE(ldev->pipe) || args->nr_bos == 0)
 		return -EINVAL;
 
-	switch (ldev->gpu_type) {
-	case GPU_MALI400:
-	case GPU_MALI450:
-		if (args->pipe == LIMA_PIPE_GP) {
-			if (args->frame_size != sizeof(struct drm_lima_m400_gp_frame))
-				return -EINVAL;
-		}
-		else {
-			if (args->frame_size != sizeof(struct drm_lima_m400_pp_frame))
-				return -EINVAL;
-		}
-		break;
-	default:
-		return -EINVAL;
-	}
+	pipe = ldev->pipe[args->pipe];
+	err = pipe->task_validate(pipe->data, NULL, args->frame_size);
+	if (err)
+		return err;
 
 	bos = kmalloc(args->nr_bos * sizeof(*bos), GFP_KERNEL);
 	if (!bos)
@@ -105,18 +95,9 @@ static int lima_ioctl_gem_submit(struct drm_device *dev, void *data, struct drm_
 		goto out1;
 	}
 
-	switch (ldev->gpu_type) {
-	case GPU_MALI400:
-	case GPU_MALI450:
-		if (args->pipe == LIMA_PIPE_PP) {
-			struct drm_lima_m400_pp_frame *f = frame;
-			if (f->num_pp > ldev->pp->num_core) {
-				err = -EINVAL;
-				goto out1;
-			}
-		}
-		break;
-	}
+	err = pipe->task_validate(pipe->data, frame, 0);
+	if (err)
+		goto out1;
 
 	err = lima_gem_submit(file, args->pipe, bos, args->nr_bos, frame, &args->fence);
 
diff --git a/drivers/gpu/drm/lima/lima_gp.c b/drivers/gpu/drm/lima/lima_gp.c
index 9cd2996..47e6514 100644
--- a/drivers/gpu/drm/lima/lima_gp.c
+++ b/drivers/gpu/drm/lima/lima_gp.c
@@ -179,18 +179,35 @@ static int lima_gp_soft_reset_async_wait(struct lima_gp *gp)
 	return 0;
 }
 
-static int lima_gp_start_task(void *data, struct lima_sched_task *task)
+static int lima_gp_task_validate(void *data, void *frame, uint32_t frame_size)
+{
+	(void)data;
+
+	if (frame_size && frame_size != sizeof(struct drm_lima_m400_gp_frame))
+		return -EINVAL;
+
+	if (frame) {
+		struct drm_lima_m400_gp_frame *f = frame;
+
+		if (f->vs_cmd_start > f->vs_cmd_end ||
+		    f->plbu_cmd_start > f->plbu_cmd_end ||
+		    f->tile_heap_start > f->tile_heap_end)
+			return -EINVAL;
+
+		if (f->vs_cmd_start == f->vs_cmd_end &&
+		    f->plbu_cmd_start == f->plbu_cmd_end)
+			return -EINVAL;
+	}
+
+	return 0;
+}
+
+static void lima_gp_task_run(void *data, struct lima_sched_task *task)
 {
 	struct lima_gp *gp = data;
-	struct lima_device *dev = gp->ip.dev;
 	struct drm_lima_m400_gp_frame *frame = task->frame;
 	u32 cmd = 0;
 
-	if (frame->vs_cmd_start > frame->vs_cmd_end ||
-	    frame->plbu_cmd_start > frame->plbu_cmd_end ||
-	    frame->tile_heap_start > frame->tile_heap_end)
-		return -EINVAL;
-
 	gp->task = 0;
 	if (frame->vs_cmd_start != frame->vs_cmd_end) {
 		cmd |= LIMA_GP_CMD_START_VS;
@@ -201,11 +218,6 @@ static int lima_gp_start_task(void *data, struct lima_sched_task *task)
 		gp->task |= LIMA_GP_TASK_PLBU;
 	}
 
-	if (!cmd) {
-		dev_err(dev->dev, "start gp task is empty\n");
-		return -EINVAL;
-	}
-
 	/* before any hw ops, wait last success task async soft reset */
 	lima_gp_soft_reset_async_wait(gp);
 
@@ -218,7 +230,6 @@ static int lima_gp_start_task(void *data, struct lima_sched_task *task)
 
 	gp_write(CMD, LIMA_GP_CMD_UPDATE_PLBU_ALLOC);
 	gp_write(CMD, cmd);
-	return 0;
 }
 
 static int lima_gp_hard_reset(struct lima_gp *gp)
@@ -245,14 +256,14 @@ static int lima_gp_hard_reset(struct lima_gp *gp)
 	return 0;
 }
 
-static int lima_gp_end_task(void *data, bool fail)
+static void lima_gp_task_fini(void *data)
 {
-	/* when task fail, to hard reset, otherwise soft reset */
-	if (fail)
-		return lima_gp_hard_reset(data);
-
 	lima_gp_soft_reset_async(data);
-	return 0;
+}
+
+static void lima_gp_task_error(void *data)
+{
+	lima_gp_hard_reset(data);
 }
 
 static void lima_gp_print_version(struct lima_gp *gp)
@@ -304,9 +315,12 @@ int lima_gp_init(struct lima_gp *gp)
 		return err;
 	}
 
-	gp->pipe.start_task = lima_gp_start_task;
-	gp->pipe.end_task = lima_gp_end_task;
+	gp->pipe.task_validate = lima_gp_task_validate;
+	gp->pipe.task_run = lima_gp_task_run;
+	gp->pipe.task_fini = lima_gp_task_fini;
+	gp->pipe.task_error = lima_gp_task_error;
 	gp->pipe.data = gp;
+
 	gp->pipe.mmu[0] = &gp->mmu;
 	gp->pipe.num_mmu = 1;
 	return 0;
diff --git a/drivers/gpu/drm/lima/lima_pp.c b/drivers/gpu/drm/lima/lima_pp.c
index ba2e31d..97a995a 100644
--- a/drivers/gpu/drm/lima/lima_pp.c
+++ b/drivers/gpu/drm/lima/lima_pp.c
@@ -260,7 +260,24 @@ void lima_pp_core_fini(struct lima_pp_core *core)
 	
 }
 
-static int lima_pp_start_task(void *data, struct lima_sched_task *task)
+static int lima_pp_task_validate(void *data, void *frame, uint32_t frame_size)
+{
+	struct lima_pp *pp = data;
+
+	if (frame_size && frame_size != sizeof(struct drm_lima_m400_pp_frame))
+		return -EINVAL;
+
+	if (frame) {
+		struct drm_lima_m400_pp_frame *f = frame;
+
+		if (f->num_pp > pp->num_core)
+			return -EINVAL;
+	}
+
+	return 0;
+}
+
+static void lima_pp_task_run(void *data, struct lima_sched_task *task)
 {
 	struct lima_pp *pp = data;
 	struct drm_lima_m400_pp_frame *frame = task->frame;
@@ -270,31 +287,34 @@ static int lima_pp_start_task(void *data, struct lima_sched_task *task)
 
 	for (i = 0; i < frame->num_pp; i++)
 		lima_pp_core_start_task(pp->core + i, i, task);
-	return 0;
 }
 
-static int lima_pp_end_task(void *data, bool fail)
+static void lima_pp_task_fini(void *data)
 {
 	struct lima_pp *pp = data;
-	int i, err = 0;
-
-	if (fail) {
-		for (i = 0; i < pp->num_core; i++)
-			err |= lima_pp_core_hard_reset(pp->core + i);
-		return err;
-	}
+	int i;
 
 	for (i = 0; i < pp->num_core; i++)
 		lima_pp_core_soft_reset_async(pp->core + i);
-	return 0;
+}
+
+static void lima_pp_task_error(void *data)
+{
+	struct lima_pp *pp = data;
+	int i;
+
+	for (i = 0; i < pp->num_core; i++)
+		lima_pp_core_hard_reset(pp->core + i);
 }
 
 void lima_pp_init(struct lima_pp *pp)
 {
 	int i;
 
-	pp->pipe.start_task = lima_pp_start_task;
-	pp->pipe.end_task = lima_pp_end_task;
+	pp->pipe.task_validate = lima_pp_task_validate;
+	pp->pipe.task_run = lima_pp_task_run;
+	pp->pipe.task_fini = lima_pp_task_fini;
+	pp->pipe.task_error = lima_pp_task_error;
 	pp->pipe.data = pp;
 
 	for (i = 0; i < pp->num_core; i++)
diff --git a/drivers/gpu/drm/lima/lima_sched.c b/drivers/gpu/drm/lima/lima_sched.c
index 7c379c3..102411f 100644
--- a/drivers/gpu/drm/lima/lima_sched.c
+++ b/drivers/gpu/drm/lima/lima_sched.c
@@ -316,7 +316,7 @@ static struct dma_fence *lima_sched_run_job(struct drm_sched_job *job)
 	for (i = 0; i < pipe->num_mmu; i++)
 		lima_mmu_switch_vm(pipe->mmu[i], task->vm, false);
 
-	pipe->start_task(pipe->data, task);
+	pipe->task_run(pipe->data, task);
 
 	return task->fence;
 }
@@ -328,7 +328,7 @@ static void lima_sched_timedout_job(struct drm_sched_job *job)
 	kthread_park(pipe->base.thread);
 	drm_sched_hw_job_reset(&pipe->base, job);
 
-	pipe->end_task(pipe->data, true);
+	pipe->task_error(pipe->data);
 
 	drm_sched_job_recovery(&pipe->base);
 	kthread_unpark(pipe->base.thread);
@@ -391,7 +391,10 @@ void lima_sched_pipe_task_done(struct lima_sched_pipe *pipe, bool error)
 	if (!task)
 		return;
 
-	pipe->end_task(pipe->data, error);
+	if (error)
+		pipe->task_error(pipe->data);
+	else
+		pipe->task_fini(pipe->data);
 
 	dma_fence_signal(task->fence);
 }
diff --git a/drivers/gpu/drm/lima/lima_sched.h b/drivers/gpu/drm/lima/lima_sched.h
index 37dc509..70bafdd 100644
--- a/drivers/gpu/drm/lima/lima_sched.h
+++ b/drivers/gpu/drm/lima/lima_sched.h
@@ -60,8 +60,10 @@ struct lima_sched_pipe {
 	struct lima_mmu *mmu[LIMA_SCHED_PIPE_MAX_MMU];
 	int num_mmu;
 
-	int (*start_task)(void *data, struct lima_sched_task *task);
-	int (*end_task)(void *data, bool fail);
+	int (*task_validate)(void *data, void *frame, uint32_t frame_size);
+	void (*task_run)(void *data, struct lima_sched_task *task);
+	void (*task_fini)(void *data);
+	void (*task_error)(void *data);
 	void *data;
 };
 
-- 
2.0.1

