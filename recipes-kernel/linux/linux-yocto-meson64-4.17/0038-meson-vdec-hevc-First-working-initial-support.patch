From 08d32c1175ef69d50c993827fa1e9b184b813ca8 Mon Sep 17 00:00:00 2001
From: Maxime Jourdan <maxi.jourdan@wanadoo.fr>
Date: Tue, 24 Apr 2018 08:33:11 +0200
Subject: [PATCH] meson: vdec: hevc: First "working" initial support

We can now decode the start of an HEVC bitstream, for example the first 120 frames
of jellyfish-10-mbps-hd-hevc.mkv (and then we get problems with overflowing frames/refs
Picture Order Count).

Still TODO is to migrate the power/clk management into the driver, right now
you still need to edit meson-pwrc-vdec.c if you want HEVC (but then it disables VDEC_1).

Also, HEVC 10-bit doesn't work yet. We can decode the first IDR frame which is a good start,
but subsequent P/B frames result in complete garbage. I'm not sure we can get it working
without using Amlogic's compressed frame pixel format.

This is also only for GXL (and maybe GXM?), GXBB requires some modifications.
---
 drivers/media/platform/meson/vdec/codec_hevc.c | 414 ++++++++++++++++++-------
 drivers/media/platform/meson/vdec/vdec_hevc.c  |  25 +-
 2 files changed, 326 insertions(+), 113 deletions(-)

diff --git a/drivers/media/platform/meson/vdec/codec_hevc.c b/drivers/media/platform/meson/vdec/codec_hevc.c
index 3a9dab8..e8eae27 100644
--- a/drivers/media/platform/meson/vdec/codec_hevc.c
+++ b/drivers/media/platform/meson/vdec/codec_hevc.c
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2018 Maxime Jourdan
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
 #include <media/v4l2-mem2mem.h>
 #include <media/videobuf2-dma-contig.h>
 
@@ -104,7 +119,7 @@
 
 /* Buffer sizes */
 #define SIZE_WORKSPACE ALIGN(LMEM_OFFSET + 0xA00, 64 * SZ_1K)
-#define SIZE_AUX (SZ_1K * 32)
+#define SIZE_AUX (SZ_1K * 16)
 #define SIZE_FRAME_MMU (0x1200 * 4)
 
 #define RPM_BEGIN                                              0x100
@@ -161,7 +176,7 @@ union rpm_param {
 	} l;
 	struct {
 		/* from ucode lmem, do not change this struct */
-		unsigned short CUR_RPS[0x10];
+		unsigned short CUR_RPS[MAX_REF_ACTIVE];
 		unsigned short num_ref_idx_l0_active;
 		unsigned short num_ref_idx_l1_active;
 		unsigned short slice_type;
@@ -311,18 +326,16 @@ struct hevc_frame {
 	struct list_head list;
 	struct vb2_v4l2_buffer *vbuf;
 	u32 poc;
-	u32 referenced;
+
+	int referenced;
+	u32 num_reorder_pic;
 
 	u32 cur_slice_idx;
 	u32 cur_slice_type;
 
-	/* Up to 16 L0 refs for up to 5 slices */
-	u32 ref_poc_l0[MAX_SLICE_NUM][16];
-	u32 ref_num_l0;
-
-	/* Up to 16 L1 refs for up to 5 slices */
-	u32 ref_poc_l1[MAX_SLICE_NUM][16];
-	u32 ref_num_l1;
+	/* 2 lists (L0/L1) ; 5 slices ; 16 refs */
+	u32 ref_poc_list[2][MAX_SLICE_NUM][16];
+	u32 ref_num[2];
 };
 
 struct tile_s {
@@ -358,19 +371,22 @@ struct codec_hevc {
 	u32 lcu_total;
 
 	/* Current Frame being handled */
-	struct hevc_frame *curr_frame;
+	struct hevc_frame *cur_frame;
+	u32 curr_poc;
 	/* collocated reference picture */
 	struct hevc_frame *col_frame;
-	u32 curr_poc;
+	u32 col_poc;
 
-	/* All frames used by the HW at a given time */
-	struct list_head frames_list;
+	/* All ref frames used by the HW at a given time */
+	struct list_head ref_frames_list;
+	u32 frames_num;
 
 	/* ?? */
 	u32 iPrevTid0POC;
 	u32 iPrevPOC;
 	u32 slice_segment_addr;
 	u32 slice_addr;
+	u32 ldc_flag;
 
 	/* Tiles */
 	u32 num_tile_col;
@@ -380,11 +396,6 @@ struct codec_hevc {
 	u32 tile_start_lcu_y;
 	u32 tile_width_lcu;
 	u32 tile_height_lcu;
-
-	/* Housekeeping thread for marking buffers to DONE
-	 * and recycling them into the hardware
-	 */
-	struct task_struct *buffers_thread;
 };
 
 /* Update the L0 and L1 reference lists for a given frame */
@@ -410,8 +421,8 @@ static void codec_hevc_update_frame_refs(struct vdec_session *sess, struct hevc_
 	for (i = 0; i < 16; i++) {
 		RefPicSetStCurr0[i] = 0;
 		RefPicSetStCurr1[i] = 0;
-		frame->ref_poc_l0[frame->cur_slice_idx][i] = 0;
-		frame->ref_poc_l1[frame->cur_slice_idx][i] = 0;
+		frame->ref_poc_list[0][frame->cur_slice_idx][i] = 0;
+		frame->ref_poc_list[1][frame->cur_slice_idx][i] = 0;
 	}
 	for (i = 0; i < 16; i++) {
 		u32 cur_rps = params->p.CUR_RPS[i];
@@ -432,14 +443,14 @@ static void codec_hevc_update_frame_refs(struct vdec_session *sess, struct hevc_
 			}
 		}
 	}
-	printk("num_neg = %d; num_pos = %d\n", num_neg, num_pos);
+	//printk("num_neg = %d; num_pos = %d\n", num_neg, num_pos);
 	total_num = num_neg + num_pos;
 
 	if (total_num > 0) {
 		if (params->p.modification_flag & 0x1) {
 			for (rIdx = 0; rIdx < num_ref_idx_l0_active; rIdx++) {
 				int cIdx = params->p.modification_list[rIdx];
-				frame->ref_poc_l0[frame->cur_slice_idx][rIdx] =
+				frame->ref_poc_list[0][frame->cur_slice_idx][rIdx] =
 					cIdx >=
 					num_neg ? RefPicSetStCurr1[cIdx -
 					num_neg] :
@@ -448,7 +459,7 @@ static void codec_hevc_update_frame_refs(struct vdec_session *sess, struct hevc_
 		} else {
 			for (rIdx = 0; rIdx < num_ref_idx_l0_active; rIdx++) {
 				int cIdx = rIdx % total_num;
-				frame->ref_poc_l0[frame->cur_slice_idx][rIdx] =
+				frame->ref_poc_list[0][frame->cur_slice_idx][rIdx] =
 					cIdx >=
 					num_neg ? RefPicSetStCurr1[cIdx -
 					num_neg] :
@@ -473,7 +484,7 @@ static void codec_hevc_update_frame_refs(struct vdec_session *sess, struct hevc_
 							params->p.
 							modification_list[rIdx];
 					}
-					frame->ref_poc_l1[frame->
+					frame->ref_poc_list[1][frame->
 						cur_slice_idx][rIdx] =
 						cIdx >=
 						num_pos ?
@@ -485,7 +496,7 @@ static void codec_hevc_update_frame_refs(struct vdec_session *sess, struct hevc_
 				for (rIdx = 0; rIdx < num_ref_idx_l1_active;
 					 rIdx++) {
 					int cIdx = rIdx % total_num;
-					frame->ref_poc_l1[frame->
+					frame->ref_poc_list[1][frame->
 						cur_slice_idx][rIdx] =
 						cIdx >=
 						num_pos ?
@@ -497,28 +508,40 @@ static void codec_hevc_update_frame_refs(struct vdec_session *sess, struct hevc_
 		}
 	}
 	/*set m_PIC */
-	frame->cur_slice_type = params->p.slice_type;
-	frame->ref_num_l0 = num_ref_idx_l0_active;
-	frame->ref_num_l1 = num_ref_idx_l1_active;
+	frame->ref_num[0] = num_ref_idx_l0_active;
+	frame->ref_num[1] = num_ref_idx_l1_active;
 
-	printk("Update frame %u; slice %u; slice_type %u; num_l0 %u; num_l1 %u\n", frame->poc, frame->cur_slice_idx, params->p.slice_type, frame->ref_num_l0, frame->ref_num_l1);
+	printk("Update frame %u; slice %u; slice_type %u; num_l0 %u; num_l1 %u\n", frame->poc, frame->cur_slice_idx, params->p.slice_type, frame->ref_num[0], frame->ref_num[1]);
 }
 
-/* Dummy thread to print status every 0.5s */
-static int codec_hevc_buffers_thread(void *data)
+static void codec_hevc_update_ldc_flag(struct codec_hevc *hevc)
 {
-	struct vdec_session *sess = data;
-	struct vdec_core *core = sess->core;
-	struct codec_hevc *hevc = sess->priv;
+	struct hevc_frame *frame = hevc->cur_frame;
+	u32 slice_type = frame->cur_slice_type;
+	int i;
+
+	hevc->ldc_flag = 0;
+
+	if (slice_type == I_SLICE)
+		return;
 
-	while (!kthread_should_stop()) {
-		msleep_interruptible(500);
-		printk("status: %08X ; level = %d ; d_si = %08X ; d_st = %08X; d_sc = %08X ; sfc = %08X\n", readl_relaxed(core->dos_base + HEVC_PARSER_INT_STATUS), readl_relaxed(core->dos_base + HEVC_STREAM_LEVEL), readl_relaxed(core->dos_base + HEVC_DECODE_SIZE), readl_relaxed(core->dos_base + DECODE_STOP_POS), readl_relaxed(core->dos_base + HEVC_STREAM_CONTROL), readl_relaxed(core->dos_base + HEVC_STREAM_FIFO_CTL));
-		printk("Stream offset: %08X; curr_lcu = %u\n", readl_relaxed(core->dos_base + HEVC_SHIFT_BYTE_COUNT), readl_relaxed(core->dos_base + HEVC_MPRED_CURR_LCU));
-		printk("HEVC_DECODE_INFO = %08X\n", readl_relaxed(core->dos_base + HEVC_DECODE_INFO));
+	hevc->ldc_flag = 1;
+	for (i = 0; (i < frame->ref_num[0]) && hevc->ldc_flag; i++) {
+		if (frame->ref_poc_list[0][frame->cur_slice_idx][i] > frame->poc) {
+			hevc->ldc_flag = 0;
+			break;
+		}
 	}
 
-	return 0;
+	if (slice_type == P_SLICE)
+		return;
+
+	for (i = 0; (i < frame->ref_num[1]) && hevc->ldc_flag; i++) {
+		if (frame->ref_poc_list[1][frame->cur_slice_idx][i] > frame->poc) {
+			hevc->ldc_flag = 0;
+			break;
+		}
+	}
 }
 
 static void codec_hevc_setup_canvas(struct vdec_session *sess)
@@ -549,6 +572,75 @@ static void codec_hevc_setup_canvas(struct vdec_session *sess)
 	}
 }
 
+/* Tag "old" frames that are no longer referenced */
+static void codec_hevc_update_referenced(struct codec_hevc *hevc)
+{
+	union rpm_param *param = &hevc->rpm_param;
+	struct hevc_frame *frame;
+	int i;
+	u32 curr_poc = hevc->curr_poc;
+
+	list_for_each_entry(frame, &hevc->ref_frames_list, list) {
+		int is_referenced = 0;
+		u32 poc_tmp;
+
+		if (!frame->referenced || frame->poc == curr_poc)
+			continue;
+
+		for (i = 0; i < MAX_REF_ACTIVE; i++) {
+			int delt;
+			if (param->p.CUR_RPS[i] & 0x8000)
+				break;
+
+			delt = param->p.CUR_RPS[i] & ((1 << (RPS_USED_BIT - 1)) - 1);
+			if (param->p.CUR_RPS[i] & (1 << (RPS_USED_BIT - 1))) {
+				poc_tmp = curr_poc - ((1 << (RPS_USED_BIT - 1)) - delt);
+			} else
+				poc_tmp = curr_poc + delt;
+			if (poc_tmp == frame->poc) {
+				is_referenced = 1;
+				/* hevc_print(hevc, 0, "i is %d\n", i); */
+				break;
+			}
+		}
+
+		frame->referenced = is_referenced;
+	}
+}
+
+static struct hevc_frame *codec_hevc_get_lowest_poc_frame(struct codec_hevc *hevc)
+{
+	struct hevc_frame *tmp, *ret = NULL;
+	u32 poc = INT_MAX;
+
+	list_for_each_entry(tmp, &hevc->ref_frames_list, list) {
+		if (tmp->poc < poc) {
+			ret = tmp;
+			poc = tmp->poc;
+		}
+	}
+
+	return ret;
+}
+
+/* Try to output as many frames as possible */
+static void codec_hevc_output_frames(struct vdec_session *sess)
+{
+	struct hevc_frame *tmp;
+	struct codec_hevc *hevc = sess->priv;
+
+	while ((tmp = codec_hevc_get_lowest_poc_frame(hevc))) {
+		if (tmp->referenced || tmp->num_reorder_pic >= hevc->frames_num)
+			break;
+
+		printk("DONE frame poc %u; vbuf %u\n", tmp->poc, tmp->vbuf->vb2_buf.index);
+		vdec_dst_buf_done(sess, tmp->vbuf);
+		list_del(&tmp->list);
+		kfree(tmp);
+		hevc->frames_num--;
+	}
+}
+
 static void codec_hevc_setup_buffers(struct vdec_session *sess)
 {
 	int i;
@@ -566,10 +658,11 @@ static void codec_hevc_setup_buffers(struct vdec_session *sess)
 	//writel_relaxed(0, core->dos_base + HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR);
 
 	v4l2_m2m_for_each_dst_buf(sess->m2m_ctx, buf) {
+		printk("buf idx: %u\n", buf->vb.vb2_buf.index);
 		buf_y_paddr  = vb2_dma_contig_plane_dma_addr(&buf->vb.vb2_buf, 0);
 		buf_uv_paddr = vb2_dma_contig_plane_dma_addr(&buf->vb.vb2_buf, 1);
 
-		printk("Buf: %16X;%16X\n", buf_y_paddr, buf_uv_paddr);
+		//printk("Buf: %16X;%16X\n", buf_y_paddr, buf_uv_paddr);
 
 		writel_relaxed(buf_y_paddr  >> 5, core->dos_base + HEVCD_MPP_ANC2AXI_TBL_DATA);
 		writel_relaxed(buf_uv_paddr >> 5, core->dos_base + HEVCD_MPP_ANC2AXI_TBL_DATA);
@@ -595,18 +688,18 @@ static int codec_hevc_setup_workspace(struct vdec_session *sess)
 	/* Allocate some memory for the HEVC decoder's state */
 	hevc->workspace_vaddr = dma_alloc_coherent(core->dev, SIZE_WORKSPACE, &hevc->workspace_paddr, GFP_KERNEL);
 	if (!hevc->workspace_vaddr) {
-		printk("Failed to request HEVC Workspace\n");
+		printk("Failed to allocate HEVC Workspace\n");
 		return -ENOMEM;
 	}
-	printk("Allocated Workspace: %08X - %08X\n", hevc->workspace_paddr, hevc->workspace_paddr + SIZE_WORKSPACE);
+	//printk("Allocated Workspace: %08X - %08X\n", hevc->workspace_paddr, hevc->workspace_paddr + SIZE_WORKSPACE);
 
 	/*hevc->frame_mmu_vaddr = dma_alloc_coherent(core->dev, SIZE_FRAME_MMU, &hevc->frame_mmu_paddr, GFP_KERNEL);
 	if (!hevc->frame_mmu_vaddr) {
-		printk("Failed to request HEVC frame_mmu\n");
+		//printk("Failed to request HEVC frame_mmu\n");
 		return -ENOMEM;
 	}
 	memset(hevc->frame_mmu_vaddr, 0, SIZE_FRAME_MMU);
-	printk("Allocated frame_mmu: %08X - %08X\n", hevc->frame_mmu_paddr, hevc->frame_mmu_paddr + SIZE_FRAME_MMU);*/
+	//printk("Allocated frame_mmu: %08X - %08X\n", hevc->frame_mmu_paddr, hevc->frame_mmu_paddr + SIZE_FRAME_MMU);*/
 
 	writel_relaxed(hevc->workspace_paddr + IPP_OFFSET, core->dos_base + HEVCD_IPP_LINEBUFF_BASE);
 	writel_relaxed(hevc->workspace_paddr + RPM_OFFSET, core->dos_base + HEVC_RPM_BUFFER);
@@ -636,14 +729,14 @@ static int codec_hevc_start(struct vdec_session *sess)
 	int ret;
 	int i;
 
-	printk("Workspace size: %u\n", SIZE_WORKSPACE);
+	//printk("Workspace size: %u\n", SIZE_WORKSPACE);
 
 	hevc = kzalloc(sizeof(*hevc), GFP_KERNEL);
 	if (!hevc)
 		return -ENOMEM;
 
 	sess->priv = hevc;
-	INIT_LIST_HEAD(&hevc->frames_list);
+	INIT_LIST_HEAD(&hevc->ref_frames_list);
 	hevc->curr_poc = INVALID_POC;
 
 	ret = codec_hevc_setup_workspace(sess);
@@ -713,23 +806,19 @@ static int codec_hevc_start(struct vdec_session *sess)
 	/* AUX buffers */
 	hevc->aux_vaddr = dma_alloc_coherent(core->dev, SIZE_AUX, &hevc->aux_paddr, GFP_KERNEL);
 	if (!hevc->aux_vaddr) {
-		printk("Failed to request HEVC AUX\n");
+		//printk("Failed to request HEVC AUX\n");
 		return -ENOMEM;
 	}
-	printk("Allocated AUX: %08X - %08X\n", hevc->aux_paddr, hevc->aux_paddr + SIZE_AUX);
+	//printk("Allocated AUX: %08X - %08X\n", hevc->aux_paddr, hevc->aux_paddr + SIZE_AUX);
 
-	/*writel_relaxed(hevc->aux_paddr, core->dos_base + HEVC_AUX_ADR);
-	writel_relaxed((((SIZE_AUX / 2) >> 4) << 16) | ((SIZE_AUX / 2) >> 4), core->dos_base + HEVC_AUX_DATA_SIZE);*/
+	writel_relaxed(hevc->aux_paddr, core->dos_base + HEVC_AUX_ADR);
+	writel_relaxed((((SIZE_AUX) >> 4) << 16) | 0, core->dos_base + HEVC_AUX_DATA_SIZE);
 
-	writel_relaxed((1<<12)|(1<<11), core->dos_base + DOS_SW_RESET3);
-	writel_relaxed(0, core->dos_base + DOS_SW_RESET3);
-	readl_relaxed(core->dos_base + DOS_SW_RESET3);
+	printk("HEVC_AUX_ADR = %08X ; HEVC_AUX_DATA_SIZE * %08X\n", readl_relaxed(core->dos_base + HEVC_AUX_ADR), readl_relaxed(core->dos_base + HEVC_AUX_DATA_SIZE));
 
-	writel_relaxed(1, core->dos_base + HEVC_MPSR);
+	codec_hevc_setup_buffers(sess);
 
-	hevc->buffers_thread = kthread_run(codec_hevc_buffers_thread, sess, "buffers_done");
-
-	printk("HEVC start OK!\n");
+	//printk("HEVC start OK!\n");
 
 	return 0;
 
@@ -743,9 +832,7 @@ static int codec_hevc_stop(struct vdec_session *sess)
 	struct codec_hevc *hevc = sess->priv;
 	struct vdec_core *core = sess->core;
 
-	printk("codec_hevc_stop\n");
-
-	kthread_stop(hevc->buffers_thread);
+	//printk("codec_hevc_stop\n");
 
 	if (hevc->workspace_vaddr) {
 		dma_free_coherent(core->dev, SIZE_WORKSPACE, hevc->workspace_vaddr, hevc->workspace_paddr);
@@ -778,7 +865,7 @@ static void codec_hevc_update_tiles(struct vdec_session *sess)
 	u32 sao_vb_size = (sao_mem_unit + (2 << 4)) * pic_height_cu;
 	u32 tiles_flags = hevc->rpm_param.p.tiles_flags;
 
-	printk("tiles_flags = %08X\n", tiles_flags);
+	//printk("tiles_flags = %08X\n", tiles_flags);
 
 	if (tiles_flags & 1) {
 		/* TODO; The sample I'm using has tiles_flags == 0 */
@@ -799,7 +886,7 @@ static void codec_hevc_update_tiles(struct vdec_session *sess)
 	hevc->tile_width_lcu = pic_width_cu;
 	hevc->tile_height_lcu = pic_height_cu;
 
-	printk("sao_mem_unit = %u; sao_vb_size = %u\n", sao_mem_unit, sao_vb_size);
+	//printk("sao_mem_unit = %u; sao_vb_size = %u\n", sao_mem_unit, sao_vb_size);
 	writel_relaxed(sao_mem_unit, core->dos_base + HEVC_sao_mem_unit);
 	writel_relaxed(hevc->workspace_paddr + SAO_ABV_OFFSET, core->dos_base + HEVC_SAO_ABV);
 	writel_relaxed(sao_vb_size, core->dos_base + HEVC_sao_vb_size);
@@ -808,9 +895,9 @@ static void codec_hevc_update_tiles(struct vdec_session *sess)
 
 static struct hevc_frame * codec_hevc_get_frame_by_poc(struct codec_hevc *hevc, u32 poc)
 {
-	struct hevc_frame * tmp;
+	struct hevc_frame *tmp;
 
-	list_for_each_entry(tmp, &hevc->frames_list, list) {
+	list_for_each_entry(tmp, &hevc->ref_frames_list, list) {
 		if (tmp->poc == poc)
 			return tmp;
 	}
@@ -823,10 +910,11 @@ static struct hevc_frame * codec_hevc_prepare_new_frame(struct vdec_session *ses
 	struct vb2_v4l2_buffer *vbuf;
 	struct hevc_frame *new_frame = NULL;
 	struct codec_hevc *hevc = sess->priv;
+	union rpm_param *params = &hevc->rpm_param;
 
 	vbuf = v4l2_m2m_dst_buf_remove(sess->m2m_ctx);
 	if (!vbuf) {
-		printk("Couldn't remove dst buf\n");
+		//printk("Couldn't remove dst buf\n");
 		return NULL;
 	}
 
@@ -837,8 +925,13 @@ static struct hevc_frame * codec_hevc_prepare_new_frame(struct vdec_session *ses
 	new_frame->vbuf = vbuf;
 	new_frame->referenced = 1;
 	new_frame->poc = hevc->curr_poc;
+	new_frame->cur_slice_type = params->p.slice_type;
+	new_frame->num_reorder_pic = params->p.sps_num_reorder_pics_0;
 
-	list_add_tail(&new_frame->list, &hevc->frames_list);
+	list_add_tail(&new_frame->list, &hevc->ref_frames_list);
+	hevc->frames_num++;
+
+	printk("New frame, buf idx %u\n", vbuf->vb2_buf.index);
 
 	return new_frame;
 }
@@ -860,7 +953,7 @@ static void codec_hevc_set_sao(struct vdec_session *sess, struct hevc_frame *fra
 	writel_relaxed(sess->width | (sess->height << 16), core->dos_base + HEVC_SAO_PIC_SIZE);
 	writel_relaxed((hevc->lcu_x_num - 1) | (hevc->lcu_y_num - 1) << 16, core->dos_base + HEVC_SAO_PIC_SIZE_LCU);
 
-	printk("buf size: %08X\n", vdec_get_output_size(sess));
+	//printk("buf size: %08X\n", vdec_get_output_size(sess));
 	writel_relaxed(buf_y_paddr, core->dos_base + HEVC_SAO_Y_START_ADDR);
 	writel_relaxed(vdec_get_output_size(sess), core->dos_base + HEVC_SAO_Y_LENGTH);
 	writel_relaxed(buf_u_v_paddr, core->dos_base + HEVC_SAO_C_START_ADDR);
@@ -874,19 +967,20 @@ static void codec_hevc_set_sao(struct vdec_session *sess, struct hevc_frame *fra
 
 		val = 0;
 		if ((misc_flag0 >> PCM_ENABLE_FLAG_BIT) & 0x1) {
-			printk("Woo..\n");
+			//printk("Woo..\n");
 			val |= ((misc_flag0 >> PCM_LOOP_FILTER_DISABLED_FLAG_BIT) & 0x1) << 3;
 		}
 		val |= (param->p.pps_cb_qp_offset & 0x1f) << 4;
 		val |= (param->p.pps_cr_qp_offset & 0x1f) << 9;
 		val |= (hevc->lcu_size == 64) ? 0 : ((hevc->lcu_size == 32) ? 1 : 2);
-		printk("HEVC_DBLK_CFG1: %08X\n", val);
+		//printk("HEVC_DBLK_CFG1: %08X\n", val);
 		writel_relaxed(val, core->dos_base + HEVC_DBLK_CFG1);
 	}
 
 	val = readl_relaxed(core->dos_base + HEVC_SAO_CTRL1) & ~0x3ff3;
 	val |=	0x1 |  /* disable cm compression ? */
-		0x880;  /* 0xff0 mask controls "endianness", setting it to 0x880 enables 64-bit big endian */
+		0xff0; /* 0xff0 mask controls "endianness", setting it to 0x880 enables 64-bit big endian.
+			  setting it to 0xff0 allows us to get NV12 */
 	writel_relaxed(val, core->dos_base + HEVC_SAO_CTRL1);
 
 	/* set them all 0 for H265_NV21 (no down-scale) */
@@ -976,10 +1070,9 @@ static void codec_hevc_set_mpred(struct vdec_session *sess, struct hevc_frame *f
 	struct vdec_core *core = sess->core;
 	struct codec_hevc *hevc = sess->priv;
 	union rpm_param *param = &hevc->rpm_param;
-	u32 ref_num_l0 = frame->ref_num_l0;
-	u32 ref_num_l1 = frame->ref_num_l1;
-	u32 *ref_poc_l0 = frame->ref_poc_l0[frame->cur_slice_idx];
-	u32 *ref_poc_l1 = frame->ref_poc_l1[frame->cur_slice_idx];
+	u32 *ref_num = frame->ref_num;
+	u32 *ref_poc_l0 = frame->ref_poc_list[0][frame->cur_slice_idx];
+	u32 *ref_poc_l1 = frame->ref_poc_list[1][frame->cur_slice_idx];
 	u32 lcu_size_log2 = ilog2(hevc->lcu_size);
 	u32 mv_mem_unit = lcu_size_log2 == 6 ? 0x200 : lcu_size_log2 == 5 ? 0x80 : 0x20;
 	u32 slice_segment_address = param->p.slice_segment_address;
@@ -991,6 +1084,7 @@ static void codec_hevc_set_mpred(struct vdec_session *sess, struct hevc_frame *f
 	u32 slice_type = param->p.slice_type;
 	dma_addr_t col_mv_rd_start_addr, col_mv_rd_ptr, col_mv_rd_end_addr;
 	dma_addr_t mpred_mv_wr_ptr;
+	u32 mv_rd_en = 1;
 	u32 val;
 	int i;
 
@@ -1004,28 +1098,31 @@ static void codec_hevc_set_mpred(struct vdec_session *sess, struct hevc_frame *f
 	writel_relaxed(codec_hevc_get_frame_mv_paddr(hevc, frame), core->dos_base + HEVC_MPRED_MV_WR_START_ADDR);
 	writel_relaxed(col_mv_rd_start_addr, core->dos_base + HEVC_MPRED_MV_RD_START_ADDR);
 
-	printk("lcu_x_num = %u; tile_width_lcu = %u\n", hevc->lcu_x_num, hevc->tile_width_lcu);
+	//printk("lcu_x_num = %u; tile_width_lcu = %u\n", hevc->lcu_x_num, hevc->tile_width_lcu);
 	val = ((hevc->lcu_x_num - hevc->tile_width_lcu) * mv_mem_unit);
-	printk("HEVC_MPRED_MV_WR_ROW_JUMP: %u\n", val);
+	//printk("HEVC_MPRED_MV_WR_ROW_JUMP: %u\n", val);
 	writel_relaxed(val, core->dos_base + HEVC_MPRED_MV_WR_ROW_JUMP);
 	writel_relaxed(val, core->dos_base + HEVC_MPRED_MV_RD_ROW_JUMP);
 
-	printk("HEVC_MPRED_CTRL0 before: %08X\n", readl_relaxed(core->dos_base + HEVC_MPRED_CTRL0));
+	if (slice_type == I_SLICE)
+		mv_rd_en = 0;
+
+	//printk("HEVC_MPRED_CTRL0 before: %08X\n", readl_relaxed(core->dos_base + HEVC_MPRED_CTRL0));
 	val = slice_type |
 			  1 << 2 | // new pic
 			  1 << 3 | // new tile
 			  is_next_slice_segment << 4 |
 			  tmvp_flag << 5 |
-			  0 << 6 | //LDCFlag
+			  hevc->ldc_flag << 6 | //LDCFlag
 			  col_from_l0_flag << 7 |
 			  1 << 9 |
 			  1 << 10 |
-			  0 << 11 | // mv_rd_en
+			  mv_rd_en << 11 |
 			  1 << 13 |
 			  lcu_size_log2 << 16 |
 			  3 << 20 | plevel << 24;
 	writel_relaxed(val, core->dos_base + HEVC_MPRED_CTRL0);
-	printk("HEVC_MPRED_CTRL0 after: %08X\n", readl_relaxed(core->dos_base + HEVC_MPRED_CTRL0));
+	//printk("HEVC_MPRED_CTRL0 after: %08X\n", readl_relaxed(core->dos_base + HEVC_MPRED_CTRL0));
 
 	val = max_num_merge_cand | 2 << 4 | 3 << 8 | 5 << 12 | 36 << 16;
 	writel_relaxed(val, core->dos_base + HEVC_MPRED_CTRL1);
@@ -1034,21 +1131,20 @@ static void codec_hevc_set_mpred(struct vdec_session *sess, struct hevc_frame *f
 
 	val = ((hevc->lcu_x_num - 1) | (hevc->lcu_y_num - 1) << 16);
 	writel_relaxed(val, core->dos_base + HEVC_MPRED_PIC_SIZE_LCU);
-	printk("PIC_SIZE_LCU = %08X\n", val);
+	//printk("PIC_SIZE_LCU = %08X\n", val);
 	val = (hevc->tile_start_lcu_x | hevc->tile_start_lcu_y << 16);
 	writel_relaxed(val, core->dos_base + HEVC_MPRED_TILE_START);
-	printk("HEVC_MPRED_TILE_START = %08X\n", val);
+	//printk("HEVC_MPRED_TILE_START = %08X\n", val);
 	val = (hevc->tile_width_lcu | hevc->tile_height_lcu << 16);
 	writel_relaxed(val, core->dos_base + HEVC_MPRED_TILE_SIZE_LCU);
-	printk("HEVC_MPRED_TILE_SIZE_LCU = %08X\n", val);
+	//printk("HEVC_MPRED_TILE_SIZE_LCU = %08X\n", val);
 
-	writel_relaxed((ref_num_l0 | ref_num_l1 << 8), core->dos_base + HEVC_MPRED_REF_NUM);
-	writel_relaxed((1 << ref_num_l0) - 1, core->dos_base + HEVC_MPRED_REF_EN_L0);
-	writel_relaxed((1 << ref_num_l1) - 1, core->dos_base + HEVC_MPRED_REF_EN_L1);
+	writel_relaxed((ref_num[1] << 8) | ref_num[0], core->dos_base + HEVC_MPRED_REF_NUM);
+	writel_relaxed((1 << ref_num[0]) - 1, core->dos_base + HEVC_MPRED_REF_EN_L0);
+	writel_relaxed((1 << ref_num[1]) - 1, core->dos_base + HEVC_MPRED_REF_EN_L1);
 
 	writel_relaxed(hevc->curr_poc, core->dos_base + HEVC_MPRED_CUR_POC);
-	/* We only try to decode first frame for now, so write invalid_poc to col poc */
-	writel_relaxed(INVALID_POC, core->dos_base + HEVC_MPRED_COL_POC);
+	writel_relaxed(hevc->col_poc, core->dos_base + HEVC_MPRED_COL_POC);
 
 	for (i = 0; i < MAX_REF_ACTIVE; ++i) {
 		printk("Ref %u: %u;%u\n", i, ref_poc_l0[i], ref_poc_l1[i]);
@@ -1057,7 +1153,7 @@ static void codec_hevc_set_mpred(struct vdec_session *sess, struct hevc_frame *f
 	}
 
 	if (slice_segment_address == 0) {
-		printk("mpred_mv_wr_ptr = %08X; col_mv_rd_start_addr = %08X\n", mpred_mv_wr_ptr, col_mv_rd_start_addr);
+		//printk("mpred_mv_wr_ptr = %08X; col_mv_rd_start_addr = %08X\n", mpred_mv_wr_ptr, col_mv_rd_start_addr);
 		writel_relaxed(hevc->workspace_paddr + MPRED_ABV_OFFSET, core->dos_base + HEVC_MPRED_ABV_START_ADDR);
 		writel_relaxed(mpred_mv_wr_ptr, core->dos_base + HEVC_MPRED_MV_WPTR);
 		writel_relaxed(col_mv_rd_start_addr, core->dos_base + HEVC_MPRED_MV_RPTR);
@@ -1065,24 +1161,111 @@ static void codec_hevc_set_mpred(struct vdec_session *sess, struct hevc_frame *f
 		writel_relaxed(col_mv_rd_ptr, core->dos_base + HEVC_MPRED_MV_RPTR);
 	}
 
-	printk("col_mv_rd_end_addr = %08X\n", col_mv_rd_end_addr);
+	//printk("col_mv_rd_end_addr = %08X\n", col_mv_rd_end_addr);
 	writel_relaxed(col_mv_rd_end_addr, core->dos_base + HEVC_MPRED_MV_RD_END_ADDR);
 }
 
 /*  motion compensation reference cache controller ; Only for first IDR frame for now */
-static void codec_hevc_set_mcrcc(struct vdec_session *sess )
+static void codec_hevc_set_mcrcc(struct vdec_session *sess)
 {
 	struct vdec_core *core = sess->core;
+	struct codec_hevc *hevc = sess->priv;
 
 	/* reset mcrcc */
 	writel_relaxed(0x02, core->dos_base + HEVCD_MCRCC_CTL1);
-	/* remove reset -- disables clock */
-	writel_relaxed(0x00, core->dos_base + HEVCD_MCRCC_CTL1);
+
+	if (hevc->cur_frame->cur_slice_type == I_SLICE) {
+		/* remove reset -- disables clock */
+		writel_relaxed(0x00, core->dos_base + HEVCD_MCRCC_CTL1);
+		return;
+	}
+
+	if (hevc->cur_frame->cur_slice_type == P_SLICE) {
+
+	} else { /* B_SLICE */
+
+	}
+
 	/* enable mcrcc progressive-mode */
-	//writel_relaxed(0xff0, core->dos_base + HEVCD_MCRCC_CTL1);
+	writel_relaxed(0xff0, core->dos_base + HEVCD_MCRCC_CTL1);
+}
+
+static void codec_hevc_set_ref_list(struct vdec_session *sess, u32 ref_num, u32 *ref_poc_list)
+{
+	struct codec_hevc *hevc = sess->priv;
+	struct hevc_frame *ref_frame;
+	struct vdec_core *core = sess->core;
+	int i;
+	u32 ref_frame_id;
+
+	for (i = 0; i < ref_num; i++) {
+		ref_frame = codec_hevc_get_frame_by_poc(hevc,
+			ref_poc_list[i]);
+
+		if (!ref_frame) {
+			printk("Couldn't find ref. frame %u\n", ref_poc_list[i]);
+			continue;
+		}
+
+		ref_frame_id = ref_frame->vbuf->vb2_buf.index * 2;
+		printk("Programming ref poc %u\n", ref_poc_list[i]);
+
+		writel_relaxed(((ref_frame_id + 1) << 16) |
+				((ref_frame_id + 1) << 8) |
+				ref_frame_id,
+				core->dos_base + HEVCD_MPP_ANC_CANVAS_DATA_ADDR);
+	}
+}
+
+static void codec_hevc_set_mc(struct vdec_session *sess, struct hevc_frame *frame)
+{
+	struct vdec_core *core = sess->core;
+
+	if (frame->cur_slice_type == I_SLICE)
+		return;
+
+	writel_relaxed(1, core->dos_base + HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR);
+	codec_hevc_set_ref_list(sess, frame->ref_num[0],
+		frame->ref_poc_list[0][frame->cur_slice_idx]);
+
+	if (frame->cur_slice_type == P_SLICE)
+		return;
+
+	writel_relaxed((16 << 8) | 1, core->dos_base + HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR);
+	codec_hevc_set_ref_list(sess, frame->ref_num[1],
+		frame->ref_poc_list[1][frame->cur_slice_idx]);
+}
+
+static void codec_hevc_update_col_frame(struct codec_hevc *hevc)
+{
+	struct hevc_frame *cur_frame = hevc->cur_frame;
+	union rpm_param *param = &hevc->rpm_param;
+	u32 list_no = 0;
+	u32 col_ref = param->p.collocated_ref_idx;
+	u32 col_from_l0 = param->p.collocated_from_l0_flag;
+
+	if (cur_frame->cur_slice_type == B_SLICE)
+		list_no = 1 - col_from_l0;
+
+	if (col_ref >= cur_frame->ref_num[list_no])
+		hevc->col_poc = INVALID_POC;
+	else
+		hevc->col_poc = cur_frame->ref_poc_list[list_no][cur_frame->cur_slice_idx][col_ref];
+
+	if (cur_frame->cur_slice_type == I_SLICE)
+		goto end;
+
+	if (hevc->col_poc != INVALID_POC)
+		hevc->col_frame = codec_hevc_get_frame_by_poc(hevc, hevc->col_poc);
+	else
+		hevc->col_frame = hevc->cur_frame;
+
+end:
+	if (!hevc->col_frame)
+		hevc->col_frame = hevc->cur_frame;
 }
 
-static void codec_hevc_set_iPrevTid0POC(struct vdec_session *sess)
+static void codec_hevc_update_pocs(struct vdec_session *sess)
 {
 	struct codec_hevc *hevc = sess->priv;
 	u32 nal_unit_type = hevc->rpm_param.p.m_nalUnitType;
@@ -1138,7 +1321,7 @@ static int codec_hevc_process_segment_header(struct vdec_session *sess)
 		nal_unit_type, temporal_id, slice_segment_address);
 
 	if (param->p.first_slice_segment_in_pic_flag == 0) {
-		printk("Oh yeah. %u %u\n", param->p.slice_segment_address, param->p.dependent_slice_segment_flag);
+		printk("dependent_slice_segment_flag = %08X\n", param->p.dependent_slice_segment_flag);
 		hevc->slice_segment_addr = param->p.slice_segment_address;
 		if (!param->p.dependent_slice_segment_flag)
 			hevc->slice_addr = hevc->slice_segment_addr;
@@ -1147,17 +1330,21 @@ static int codec_hevc_process_segment_header(struct vdec_session *sess)
 		hevc->slice_addr = 0;
 	}
 
-	codec_hevc_set_iPrevTid0POC(sess);
+	codec_hevc_update_pocs(sess);
 	printk("curr_poc = %u; iPrevPOC = %u; iPrevTid0POC = %u\n", hevc->curr_poc, hevc->iPrevPOC, hevc->iPrevTid0POC);
 
-	/* ? First slice: new frame ? */
+	/* First slice: new frame ? */
 	if (slice_segment_address == 0) {
-		hevc->curr_frame = codec_hevc_prepare_new_frame(sess);
-		if (!hevc->curr_frame)
+		codec_hevc_update_referenced(hevc);
+		codec_hevc_output_frames(sess);
+
+		hevc->cur_frame = codec_hevc_prepare_new_frame(sess);
+		if (!hevc->cur_frame)
 			return -1;
 
 		codec_hevc_update_tiles(sess);
-		hevc->col_frame = hevc->curr_frame;
+	} else {
+		hevc->cur_frame->cur_slice_idx++;
 	}
 
 	return 0;
@@ -1201,7 +1388,7 @@ static void codec_hevc_fetch_rpm(struct vdec_session *sess)
 
 	codec_hevc_process_rpm(sess);
 
-	printk("Size: %ux%u ; %ux%u\n", hevc->rpm_param.p.pic_width_in_luma_samples,  hevc->rpm_param.p.pic_height_in_luma_samples, sess->width, sess->height);
+	//printk("Size: %ux%u ; %ux%u\n", hevc->rpm_param.p.pic_width_in_luma_samples,  hevc->rpm_param.p.pic_height_in_luma_samples, sess->width, sess->height);
 }
 
 static irqreturn_t codec_hevc_isr(struct vdec_session *sess)
@@ -1212,22 +1399,25 @@ static irqreturn_t codec_hevc_isr(struct vdec_session *sess)
 
 	dec_status = readl_relaxed(core->dos_base + HEVC_DEC_STATUS_REG);
 	printk("!!! codec_hevc_isr: %08X\n", dec_status);
-	printk("HEVC_SHIFT_BYTE_COUNT: %u\n", readl_relaxed(core->dos_base + HEVC_SHIFT_BYTE_COUNT));
-	printk("HEVC_PARSER_LCU_START: %u\n", readl_relaxed(core->dos_base + HEVC_PARSER_LCU_START) & 0xffffff);
+
+	//printk("HEVC_SHIFT_BYTE_COUNT: %u\n", readl_relaxed(core->dos_base + HEVC_SHIFT_BYTE_COUNT));
+	//printk("HEVC_PARSER_LCU_START: %u\n", readl_relaxed(core->dos_base + HEVC_PARSER_LCU_START) & 0xffffff);
 
 	if (dec_status == HEVC_SLICE_SEGMENT_DONE) {
 		codec_hevc_fetch_rpm(sess);
-		codec_hevc_setup_buffers(sess);
 		codec_hevc_process_segment_header(sess);
 
 		writel_relaxed(readl_relaxed(core->dos_base + HEVC_WAIT_FLAG) | 2, core->dos_base + HEVC_WAIT_FLAG);
 
-		codec_hevc_update_frame_refs(sess, hevc->curr_frame);
-		codec_hevc_set_mcrcc(sess);
-		codec_hevc_set_mpred(sess, hevc->curr_frame, hevc->col_frame);
-		codec_hevc_set_sao(sess, hevc->curr_frame);
+		codec_hevc_update_frame_refs(sess, hevc->cur_frame);
+		codec_hevc_update_col_frame(hevc);
+		codec_hevc_update_ldc_flag(hevc);
+		//codec_hevc_set_mcrcc(sess);
+		codec_hevc_set_mc(sess, hevc->cur_frame);
+		codec_hevc_set_mpred(sess, hevc->cur_frame, hevc->col_frame);
+		codec_hevc_set_sao(sess, hevc->cur_frame);
 
-		printk("Stream offset: %08X\n", readl_relaxed(core->dos_base + HEVC_SHIFT_BYTE_COUNT));
+		//printk("Stream offset: %08X\n", readl_relaxed(core->dos_base + HEVC_SHIFT_BYTE_COUNT));
 		writel_relaxed(HEVC_CODED_SLICE_SEGMENT_DAT, core->dos_base + HEVC_DEC_STATUS_REG);
 		writel_relaxed(AMRISC_MAIN_REQ, core->dos_base + HEVC_MCPU_INTR_REQ);
 	}
diff --git a/drivers/media/platform/meson/vdec/vdec_hevc.c b/drivers/media/platform/meson/vdec/vdec_hevc.c
index 1eb93d1..23126fb 100644
--- a/drivers/media/platform/meson/vdec/vdec_hevc.c
+++ b/drivers/media/platform/meson/vdec/vdec_hevc.c
@@ -1,3 +1,17 @@
+/*
+ * Copyright (C) 2018 Maxime Jourdan
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
 #include <linux/firmware.h>
 
 #include "vdec_1.h"
@@ -110,7 +124,6 @@ static int vdec_hevc_start(struct vdec_session *sess)
 
 	/* Reset VDEC_HEVC*/
 	writel_relaxed(0xffffffff, core->dos_base + DOS_SW_RESET3);
-	udelay(10);
 	writel_relaxed(0x00000000, core->dos_base + DOS_SW_RESET3);
 
 	writel_relaxed(0xffffffff, core->dos_base + DOS_GCLK_EN3);
@@ -121,6 +134,10 @@ static int vdec_hevc_start(struct vdec_session *sess)
 	/* Remove VDEC_HEVC Isolation */
 	regmap_update_bits(core->regmap_ao, AO_RTI_GEN_PWR_ISO0, 0xc00, 0);
 
+	writel_relaxed(0xffffffff, core->dos_base + DOS_SW_RESET3);
+	udelay(10);
+	writel_relaxed(0x00000000, core->dos_base + DOS_SW_RESET3);
+
 	vdec_hevc_stbuf_init(sess);
 
 	ret = vdec_hevc_load_firmware(sess, sess->fmt_out->firmware_path);
@@ -129,6 +146,12 @@ static int vdec_hevc_start(struct vdec_session *sess)
 
 	codec_ops->start(sess);
 
+	writel_relaxed((1<<12)|(1<<11), core->dos_base + DOS_SW_RESET3);
+	writel_relaxed(0, core->dos_base + DOS_SW_RESET3);
+	readl_relaxed(core->dos_base + DOS_SW_RESET3);
+
+	writel_relaxed(1, core->dos_base + HEVC_MPSR);
+
 	printk("vdec_hevc_start end\n");
 
 	return 0;
