From 0f8da7f026dd91d8498d0aa5091a7f13455ec040 Mon Sep 17 00:00:00 2001
From: Neil Armstrong <narmstrong@baylibre.com>
Date: Mon, 9 Apr 2018 15:41:11 +0200
Subject: [PATCH 02/83] WIP fixups

---
 drivers/gpu/drm/meson/meson_crtc.c    |  73 ++++++++++++++----
 drivers/gpu/drm/meson/meson_overlay.c | 141 ++++++++++++++++++++--------------
 2 files changed, 142 insertions(+), 72 deletions(-)

diff --git a/drivers/gpu/drm/meson/meson_crtc.c b/drivers/gpu/drm/meson/meson_crtc.c
index ed7004c..e6abdf6 100644
--- a/drivers/gpu/drm/meson/meson_crtc.c
+++ b/drivers/gpu/drm/meson/meson_crtc.c
@@ -25,6 +25,7 @@
 #include <linux/module.h>
 #include <linux/mutex.h>
 #include <linux/platform_device.h>
+#include <linux/bitfield.h>
 #include <drm/drmP.h>
 #include <drm/drm_atomic.h>
 #include <drm/drm_atomic_helper.h>
@@ -98,18 +99,25 @@ static void meson_crtc_atomic_enable(struct drm_crtc *crtc,
 	writel(crtc_state->mode.hdisplay,
 	       priv->io_base + _REG(VPP_POSTBLEND_H_SIZE));
 
-	writel_bits_relaxed(VPP_POSTBLEND_ENABLE, VPP_POSTBLEND_ENABLE,
-			    priv->io_base + _REG(VPP_MISC));
+	/* VD1 Preblend vertical start/end */
+	if (crtc_state->mode.hdisplay > 1080)
+		writel(FIELD_PREP(GENMASK(11, 0),
+				  crtc_state->mode.hdisplay - 1),
+		       priv->io_base + _REG(VPP_PREBLEND_VD1_V_START_END));
+	else
+		writel(FIELD_PREP(GENMASK(11, 0), 1080 - 1),
+		       priv->io_base + _REG(VPP_PREBLEND_VD1_V_START_END));
 
-	/* Enable VPP Preblend */
-	writel(crtc_state->mode.hdisplay,
-	       priv->io_base + _REG(VPP_PREBLEND_H_SIZE));
+	/* VD1 Preblend horizontal start/end */
+	writel(FIELD_PREP(GENMASK(11, 0), 4096 - 1),
+	       priv->io_base + _REG(VPP_PREBLEND_VD1_H_START_END));
 
-	writel_bits_relaxed(VPP_PREBLEND_ENABLE, VPP_PREBLEND_ENABLE,
+	writel_bits_relaxed(VPP_POSTBLEND_ENABLE, VPP_POSTBLEND_ENABLE,
 			    priv->io_base + _REG(VPP_MISC));
 
-	writel(crtc_state->mode.hdisplay,
-	       priv->io_base + _REG(VPP_LINE_IN_LENGTH));
+	/*
+	writel_bits_relaxed(VPP_PREBLEND_ENABLE, VPP_PREBLEND_ENABLE,
+			    priv->io_base + _REG(VPP_MISC)); */
 
 	priv->viu.osd1_enabled = true;
 	priv->viu.vd1_enabled = true;
@@ -133,9 +141,9 @@ static void meson_crtc_atomic_disable(struct drm_crtc *crtc,
 	writel_bits_relaxed(VPP_POSTBLEND_ENABLE, 0,
 			    priv->io_base + _REG(VPP_MISC));
 
-	/* Disable VPP Preblend */
+	/* Disable VPP Preblend * /
 	writel_bits_relaxed(VPP_PREBLEND_ENABLE, 0,
-			    priv->io_base + _REG(VPP_MISC));
+			    priv->io_base + _REG(VPP_MISC)); */
 
 	if (crtc->state->event && !crtc->state->active) {
 		spin_lock_irq(&crtc->dev->event_lock);
@@ -229,7 +237,7 @@ void meson_crtc_irq(struct meson_drm *priv)
 	/* Update the VD1 registers */
 	if (priv->viu.vd1_enabled && priv->viu.vd1_commit) {
 
-		DRM_DEBUG_DRIVER("VD1 update\n");
+		DRM_INFO("VD1 update\n");
 
 		writel_relaxed(priv->viu.vd1_if0_gen_reg,
 				priv->io_base + _REG(VD1_IF0_GEN_REG));
@@ -261,13 +269,49 @@ void meson_crtc_irq(struct meson_drm *priv)
 				priv->io_base + _REG(VD1_IF0_RANGE_MAP_CB));
 		writel_relaxed(priv->viu.vd1_range_map_cr,
 				priv->io_base + _REG(VD1_IF0_RANGE_MAP_CR));
+		writel_relaxed(priv->viu.vpp_pic_in_height,
+				priv->io_base + _REG(VPP_PIC_IN_HEIGHT));
+		writel_relaxed(priv->viu.vpp_postblend_vd1_h_start_end,
+				priv->io_base + _REG(VPP_POSTBLEND_VD1_H_START_END));
+		writel_relaxed(priv->viu.vpp_postblend_vd1_v_start_end,
+				priv->io_base + _REG(VPP_POSTBLEND_VD1_V_START_END));
+		writel_relaxed(priv->viu.vpp_hsc_region12_startp,
+				priv->io_base + _REG(VPP_HSC_REGION12_STARTP));
+		writel_relaxed(priv->viu.vpp_hsc_region34_startp,
+				priv->io_base + _REG(VPP_HSC_REGION34_STARTP));
+		writel_relaxed(priv->viu.vpp_hsc_region4_endp,
+				priv->io_base + _REG(VPP_HSC_REGION4_ENDP));
+		writel_relaxed(priv->viu.vpp_hsc_start_phase_step,
+				priv->io_base + _REG(VPP_HSC_START_PHASE_STEP));
+		writel_relaxed(priv->viu.vpp_hsc_region1_phase_slope,
+				priv->io_base + _REG(VPP_HSC_REGION1_PHASE_SLOPE));
+		writel_relaxed(priv->viu.vpp_hsc_region3_phase_slope,
+				priv->io_base + _REG(VPP_HSC_REGION3_PHASE_SLOPE));
+		writel_relaxed(priv->viu.vpp_line_in_length,
+				priv->io_base + _REG(VPP_LINE_IN_LENGTH));
+		writel_relaxed(priv->viu.vpp_preblend_h_size,
+				priv->io_base + _REG(VPP_PREBLEND_H_SIZE));
+		writel_relaxed(priv->viu.vpp_vsc_region12_startp,
+				priv->io_base + _REG(VPP_VSC_REGION12_STARTP));
+		writel_relaxed(priv->viu.vpp_vsc_region34_startp,
+				priv->io_base + _REG(VPP_VSC_REGION34_STARTP));
+		writel_relaxed(priv->viu.vpp_vsc_region4_endp,
+				priv->io_base + _REG(VPP_VSC_REGION4_ENDP));
+		writel_relaxed(priv->viu.vpp_vsc_start_phase_step,
+				priv->io_base + _REG(VPP_VSC_START_PHASE_STEP));
+		writel_relaxed(priv->viu.vpp_vsc_ini_phase,
+				priv->io_base + _REG(VPP_VSC_INI_PHASE));
+		writel_relaxed(priv->viu.vpp_vsc_phase_ctrl,
+				priv->io_base + _REG(VPP_VSC_PHASE_CTRL));
+		writel_relaxed(priv->viu.vpp_hsc_phase_ctrl,
+				priv->io_base + _REG(VPP_HSC_PHASE_CTRL));
+		writel_relaxed(0x78404,
+				priv->io_base + _REG(VPP_SC_MISC));
 		/*
 		writel_relaxed(priv->viu.,
 				priv->io_base + _REG());
 				*/
 
-		/* TODO Scaler */
-
 		switch (priv->viu.vd1_planes) {
 		case 3:
 			meson_canvas_setup(priv, MESON_CANVAS_ID_VD1_2,
@@ -288,7 +332,8 @@ void meson_crtc_irq(struct meson_drm *priv)
 
 		/* TODO zorder */
 		/* Enable VD1 */
-		writel_bits_relaxed(VPP_VD1_PREBLEND, VPP_VD1_PREBLEND,
+		writel_bits_relaxed(VPP_VD1_PREBLEND | VPP_VD1_POSTBLEND,
+				    VPP_VD1_PREBLEND | VPP_VD1_POSTBLEND,
 				    priv->io_base + _REG(VPP_MISC));
 
 		priv->viu.vd1_commit = false;
diff --git a/drivers/gpu/drm/meson/meson_overlay.c b/drivers/gpu/drm/meson/meson_overlay.c
index 227d9d5..d71e68c 100644
--- a/drivers/gpu/drm/meson/meson_overlay.c
+++ b/drivers/gpu/drm/meson/meson_overlay.c
@@ -54,6 +54,7 @@
 /* VIU_VD1_FMT_CTRL */
 #define VD_HORZ_Y_C_RATIO(value)	FIELD_PREP(GENMASK(22, 21), value)
 #define VD_HORZ_FMT_EN			BIT(20)
+#define VD_VERT_RPT_LINE0		BIT(16)
 #define VD_VERT_INITIAL_PHASE(value)	FIELD_PREP(GENMASK(11, 8), value)
 #define VD_VERT_PHASE_STEP(value)	FIELD_PREP(GENMASK(7, 1), value)
 #define VD_VERT_FMT_EN			BIT(0)
@@ -66,6 +67,10 @@
 #define VD_V_START(value)		FIELD_PREP(GENMASK(11, 0), value)
 #define VD_V_END(value)			FIELD_PREP(GENMASK(27, 16), value)
 
+/* VIU_VD1_FMT_W */
+#define VD_V_WIDTH(value)		FIELD_PREP(GENMASK(11, 0), value)
+#define VD_H_WIDTH(value)		FIELD_PREP(GENMASK(27, 16), value)
+
 /* VPP_HSC_REGION12_STARTP VPP_HSC_REGION34_STARTP */
 #define VD_REGION24_START(value)	FIELD_PREP(GENMASK(11, 0), value)
 #define VD_REGION13_END(value)		FIELD_PREP(GENMASK(27, 16), value)
@@ -147,28 +152,28 @@ static void meson_overlay_setup_scaler_params(struct meson_drm *priv,
 					     struct drm_plane *plane)
 {
 	struct drm_plane_state *state = plane->state;
-	struct drm_crtc_state *crtc_state;
-	unsigned int crtc_height, crtc_width;
-	unsigned int w_in, h_in;
+	struct drm_crtc_state *crtc_state = priv->crtc->state;
 	unsigned int video_top, video_left, video_width, video_height;
-	unsigned int ratio_x, ratio_y;
-	unsigned int temp, start, end, temp_height, temp_width;
+	unsigned int crtc_height, crtc_width;
 	unsigned int vd_start_lines, vd_end_lines;
 	unsigned int hd_start_lines, hd_end_lines;
 	unsigned int vsc_startp, vsc_endp;
 	unsigned int hsc_startp, hsc_endp;
+	unsigned int ratio_x, ratio_y;
+	unsigned int w_in, h_in;
 	int vphase, vphase_repeat_skip;
+	int temp_height, temp_width;
+	int temp, start, end;
 
-	crtc_state = drm_atomic_get_crtc_state(state->state, state->crtc);
-	if (IS_ERR(crtc_state)) {
-		pr_warn("no crtc_state !\n");
+	if (!crtc_state) {
+		DRM_ERROR("Invalid crtc_state\n");
 		return;
 	}
 
-	crtc_height = crtc_state->mode.hdisplay;
-	crtc_width = crtc_state->mode.vdisplay;
+	crtc_height = crtc_state->mode.vdisplay;
+	crtc_width = crtc_state->mode.hdisplay;
 
-	/* TODO Cropping */
+	/* TODO Cropping using src_x and src_y */
 	w_in = fixed16_to_int(state->src_w);
 	h_in = fixed16_to_int(state->src_h);
 
@@ -183,10 +188,18 @@ static void meson_overlay_setup_scaler_params(struct meson_drm *priv,
 	if (ratio_x * video_width < (w_in << 18))
 		ratio_x++;
 
-	/* TODO Interlace  */
+	DRM_INFO("w_in %d h_in %d\n", w_in, h_in);
+	DRM_INFO("video top %d left %d width %d height %d\n",
+		 video_top, video_left, video_width, video_height);
+	DRM_INFO("ratio x 0x%x y 0x%x\n", ratio_x, ratio_y);
+
+
+	/* TODO Interlace output */
 
 	meson_overlay_get_vertical_phase(ratio_y, &vphase, &vphase_repeat_skip);
 
+	DRM_INFO("vphase 0x%x skip %d\n", vphase, vphase_repeat_skip);
+
 	/* Vertical */
 
 	start = video_top + video_height / 2 - ((h_in << 17) / ratio_x);
@@ -198,17 +211,19 @@ static void meson_overlay_setup_scaler_params(struct meson_drm *priv,
 		vd_start_lines = 0;
 	}
 
-	temp_height = min((video_top + video_height - 1),
-			  (crtc_height - 1)) - video_top + 1;
+	temp_height = min_t(unsigned int, (video_top + video_height - 1),
+			    (crtc_height - 1)) - video_top + 1;
 	temp = vd_start_lines + (temp_height * ratio_y >> 18);
 	vd_end_lines = (temp <= (h_in - 1)) ? temp : (h_in - 1);
 
-	start = max(start, max(0, video_top));
-	end = min(end, min((s32)(crtc_height - 1),
-			   (s32)(video_top + video_height - 1)));
+	vsc_startp = max_t(unsigned int, start,
+			   max_t(unsigned int, 0, video_top));
+	vsc_endp = min_t(unsigned int, end,
+			 min_t(int, crtc_height - 1,
+			       video_top + video_height - 1));
 
-	vsc_startp = start;
-	vsc_endp = end;
+	DRM_INFO("vsc startp %d endp %d start_lines %d end_lines %d\n",
+		 vsc_startp, vsc_endp, vd_start_lines, vd_end_lines);
 
 
 	/* Horizontal */
@@ -222,15 +237,20 @@ static void meson_overlay_setup_scaler_params(struct meson_drm *priv,
 		hd_start_lines = 0;
 	}
 
-	temp_width = min((video_left + video_width - 1),
-			 (crtc_width - 1)) - video_left + 1;
+	temp_width = min_t(unsigned int, (video_left + video_width - 1),
+			   (crtc_width - 1)) - video_left + 1;
 	temp = hd_start_lines + (temp_width * ratio_x >> 18);
 	hd_end_lines = (temp <= (w_in - 1)) ? temp : (w_in - 1);
 
 	priv->viu.vpp_line_in_length = hd_end_lines - hd_start_lines + 1;
-	hsc_startp = max(start, max(0, video_left));
-	hsc_endp = min(end, min((s32)(crtc_width - 1),
-				(s32)(video_left + video_width - 1)));
+	hsc_startp = max_t(unsigned int, start,
+			   max_t(unsigned int, 0, video_left));
+	hsc_endp = min_t(unsigned int, end,
+			 min_t(int, crtc_width - 1,
+			       video_left + video_width - 1));
+
+	DRM_INFO("hsc startp %d endp %d start_lines %d end_lines %d\n",
+		 hsc_startp, hsc_endp, hd_start_lines, hd_end_lines);
 
 	priv->viu.vpp_vsc_start_phase_step = ratio_y << 6;
 
@@ -242,6 +262,10 @@ static void meson_overlay_setup_scaler_params(struct meson_drm *priv,
 				    VD_X_END(hd_end_lines);
 	priv->viu.vd1_if0_chroma_x0 = VD_X_START(hd_start_lines >> 1) |
 				      VD_X_END(hd_end_lines >> 1);
+
+	priv->viu.viu_vd1_fmt_w = VD_H_WIDTH(hd_end_lines - hd_start_lines) |
+				  VD_V_WIDTH(hd_end_lines/2 - hd_start_lines/2);
+
 	priv->viu.vd1_if0_luma_y0 = VD_Y_START(vd_start_lines) |
 				    VD_Y_END(vd_end_lines);
 	
@@ -285,10 +309,6 @@ static void meson_overlay_atomic_update(struct drm_plane *plane,
 	struct meson_drm *priv = meson_overlay->priv;
 	struct drm_gem_cma_object *gem;
 	unsigned long flags;
-	unsigned int height1_div = 1;
-	unsigned int height2_div = 1;
-	unsigned int width1_div = 1;
-	unsigned int width2_div = 1;
 
 	DRM_DEBUG_DRIVER("\n");
 
@@ -324,11 +344,9 @@ static void meson_overlay_atomic_update(struct drm_plane *plane,
 	priv->viu.vd1_range_map_y = 0;
 	priv->viu.vd1_range_map_cb = 0;
 	priv->viu.vd1_range_map_cr = 0;
-	priv->viu.viu_vd1_fmt_w = 0;
 
 	switch (fb->format->format) {
 	case DRM_FORMAT_RGB888:
-		priv->viu.vd1_planes = 1;
 		priv->viu.vd1_if0_gen_reg |= VD_DEMUX_MODE_RGB |
 					     VD_BYTES_PER_PIXEL(2);
 		priv->viu.vd1_if0_canvas0 = CANVAS_ADDR0(MESON_CANVAS_ID_VD1_0);
@@ -336,19 +354,18 @@ static void meson_overlay_atomic_update(struct drm_plane *plane,
 		priv->viu.viu_vd1_fmt_ctrl = 0;
 		break;
 	case DRM_FORMAT_YUYV:
-		priv->viu.vd1_planes = 1;
 		priv->viu.vd1_if0_gen_reg |= VD_BYTES_PER_PIXEL(1);
 		priv->viu.vd1_if0_canvas0 = CANVAS_ADDR0(MESON_CANVAS_ID_VD1_0);
 		priv->viu.vd1_if0_gen_reg2 = 0;
 		priv->viu.viu_vd1_fmt_ctrl = VD_HORZ_Y_C_RATIO(1) | /* /2 */
 					     VD_HORZ_FMT_EN |
+					     VD_VERT_RPT_LINE0 |
 					     VD_VERT_INITIAL_PHASE(12) |
 					     VD_VERT_PHASE_STEP(16) | /* /2 */
 					     VD_VERT_FMT_EN;
 		break;
 	case DRM_FORMAT_NV12:
 	case DRM_FORMAT_NV21:
-		priv->viu.vd1_planes = 2;
 		priv->viu.vd1_if0_gen_reg |= VD_SEPARATE_EN;
 		priv->viu.vd1_if0_canvas0 = CANVAS_ADDR1(MESON_CANVAS_ID_VD1_1) |
 					    CANVAS_ADDR0(MESON_CANVAS_ID_VD1_0);
@@ -358,18 +375,16 @@ static void meson_overlay_atomic_update(struct drm_plane *plane,
 			priv->viu.vd1_if0_gen_reg2 = VD_COLOR_MAP(2);
 		priv->viu.viu_vd1_fmt_ctrl = VD_HORZ_Y_C_RATIO(1) | /* /2 */
 					     VD_HORZ_FMT_EN |
+					     VD_VERT_RPT_LINE0 |
 					     VD_VERT_INITIAL_PHASE(12) |
 					     VD_VERT_PHASE_STEP(8) | /* /4 */
 					     VD_VERT_FMT_EN;
-		height1_div = 2;
-		width1_div = 2;
 		break;
 	case DRM_FORMAT_YUV444:
 	case DRM_FORMAT_YUV422:
 	case DRM_FORMAT_YUV420:
 	case DRM_FORMAT_YUV411:
 	case DRM_FORMAT_YUV410:
-		priv->viu.vd1_planes = 3;
 		priv->viu.vd1_if0_gen_reg |= VD_SEPARATE_EN;
 		priv->viu.vd1_if0_canvas0 = CANVAS_ADDR2(MESON_CANVAS_ID_VD1_2) |
 					    CANVAS_ADDR1(MESON_CANVAS_ID_VD1_1) |
@@ -380,43 +395,31 @@ static void meson_overlay_atomic_update(struct drm_plane *plane,
 		else if (fb->format->format == DRM_FORMAT_YUV422) {
 			priv->viu.viu_vd1_fmt_ctrl = VD_HORZ_Y_C_RATIO(1) | /* /2 */
 						     VD_HORZ_FMT_EN |
+						     VD_VERT_RPT_LINE0 |
 						     VD_VERT_INITIAL_PHASE(12) |
 						     VD_VERT_PHASE_STEP(16) | /* /2 */
 						     VD_VERT_FMT_EN;
-			height1_div = 2;
-			height2_div = 2;
-			width1_div = 2;
-			width2_div = 2;
 		} else if (fb->format->format == DRM_FORMAT_YUV420) {
 			priv->viu.viu_vd1_fmt_ctrl = VD_HORZ_Y_C_RATIO(1) | /* /2 */
 						     VD_HORZ_FMT_EN |
+						     VD_VERT_RPT_LINE0 |
 						     VD_VERT_INITIAL_PHASE(12) |
 						     VD_VERT_PHASE_STEP(8) | /* /4 */
 						     VD_VERT_FMT_EN;
-			height1_div = 4;
-			height2_div = 4;
-			width1_div = 2;
-			width2_div = 2;
 		} else if (fb->format->format == DRM_FORMAT_YUV411) {
 			priv->viu.viu_vd1_fmt_ctrl = VD_HORZ_Y_C_RATIO(2) | /* /4 */
 						     VD_HORZ_FMT_EN |
+						     VD_VERT_RPT_LINE0 |
 						     VD_VERT_INITIAL_PHASE(12) |
 						     VD_VERT_PHASE_STEP(16) | /* /2 */
 						     VD_VERT_FMT_EN;
-			height1_div = 2;
-			height2_div = 2;
-			width1_div = 4;
-			width2_div = 4;
 		} else if (fb->format->format == DRM_FORMAT_YUV410) {
 			priv->viu.viu_vd1_fmt_ctrl = VD_HORZ_Y_C_RATIO(2) | /* /4 */
 						     VD_HORZ_FMT_EN |
+						     VD_VERT_RPT_LINE0 |
 						     VD_VERT_INITIAL_PHASE(12) |
 						     VD_VERT_PHASE_STEP(8) | /* /4 */
 						     VD_VERT_FMT_EN;
-			height1_div = 4;
-			height2_div = 4;
-			width1_div = 4;
-			width2_div = 4;
 		}
 		break;
 	}
@@ -424,22 +427,44 @@ static void meson_overlay_atomic_update(struct drm_plane *plane,
 	/* TODO Interlace  */
 
 	/* Update Canvas with buffer address */
-	switch (priv->viu.vd1_planes) {
+	switch (drm_format_num_planes(fb->format->format)) {
 	case 3:
 		gem = drm_fb_cma_get_gem_obj(fb, 2);
-		priv->viu.vd1_addr2 = gem->paddr;
+		priv->viu.vd1_addr2 = gem->paddr + fb->offsets[2];
 		priv->viu.vd1_stride2 = fb->pitches[2];
-		priv->viu.vd1_height2 = fb->height / height2_div;
+			/*drm_format_plane_width(fb->pitches[2],
+					       fb->format->format, 2);*/
+		priv->viu.vd1_height2 =
+			drm_format_plane_height(fb->height,
+						fb->format->format, 2);
+		DRM_INFO("plane 2 addr 0x%x stride %d height %d\n",
+			 priv->viu.vd1_addr2,
+			 priv->viu.vd1_stride2,
+			 priv->viu.vd1_height2);
 	case 2:
 		gem = drm_fb_cma_get_gem_obj(fb, 1);
-		priv->viu.vd1_addr1 = gem->paddr;
+		priv->viu.vd1_addr1 = gem->paddr + fb->offsets[1];
 		priv->viu.vd1_stride1 = fb->pitches[1];
-		priv->viu.vd1_height1 = fb->height / height1_div;
+			/*drm_format_plane_width(fb->pitches[1],
+					       fb->format->format, 1);*/
+		priv->viu.vd1_height1 =
+			drm_format_plane_height(fb->height,
+						fb->format->format, 1);
+		DRM_INFO("plane 1 addr 0x%x stride %d height %d\n",
+			 priv->viu.vd1_addr1,
+			 priv->viu.vd1_stride1,
+			 priv->viu.vd1_height1);
 	case 1:
 		gem = drm_fb_cma_get_gem_obj(fb, 0);
-		priv->viu.vd1_addr0 = gem->paddr;
+		priv->viu.vd1_addr0 = gem->paddr + fb->offsets[0];
 		priv->viu.vd1_stride0 = fb->pitches[0];
-		priv->viu.vd1_height0 = fb->height;
+		priv->viu.vd1_height0 =
+			drm_format_plane_height(fb->height,
+						fb->format->format, 0);
+		DRM_INFO("plane 0 addr 0x%x stride %d height %d\n",
+			 priv->viu.vd1_addr0,
+			 priv->viu.vd1_stride0,
+			 priv->viu.vd1_height0);
 	}
 
 	spin_unlock_irqrestore(&priv->drm->event_lock, flags);
-- 
2.0.1

