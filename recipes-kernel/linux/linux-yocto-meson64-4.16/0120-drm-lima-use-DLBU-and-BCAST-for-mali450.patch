From e0ab875be2bc6e0306260aa6774189597b151994 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Fri, 20 Apr 2018 21:19:01 +0800
Subject: [PATCH 120/120] drm/lima: use DLBU and BCAST for mali450

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 drivers/gpu/drm/lima/lima_bcast.c  |  27 ++++-
 drivers/gpu/drm/lima/lima_bcast.h  |   3 +
 drivers/gpu/drm/lima/lima_device.c |  14 ++-
 drivers/gpu/drm/lima/lima_dlbu.c   |  30 +++++-
 drivers/gpu/drm/lima/lima_dlbu.h   |   6 ++
 drivers/gpu/drm/lima/lima_pp.c     | 214 +++++++++++++++++++++++++++++--------
 drivers/gpu/drm/lima/lima_pp.h     |   3 +
 drivers/gpu/drm/lima/lima_sched.c  |  19 ++--
 drivers/gpu/drm/lima/lima_sched.h  |   4 +
 drivers/gpu/drm/lima/lima_vm.h     |   2 +-
 include/uapi/drm/lima_drm.h        |  15 ++-
 11 files changed, 273 insertions(+), 64 deletions(-)

diff --git a/drivers/gpu/drm/lima/lima_bcast.c b/drivers/gpu/drm/lima/lima_bcast.c
index 86ea48c..2113c54 100644
--- a/drivers/gpu/drm/lima/lima_bcast.c
+++ b/drivers/gpu/drm/lima/lima_bcast.c
@@ -32,14 +32,31 @@
 #define bcast_write(reg, data) writel(data, ip->iomem + LIMA_BCAST_##reg)
 #define bcast_read(reg) readl(ip->iomem + LIMA_BCAST_##reg)
 
-int lima_bcast_init(struct lima_ip *ip)
+void lima_bcast_enable(struct lima_device *dev)
 {
-	struct lima_device *dev = ip->dev;
+	struct lima_sched_pipe *pipe = dev->pipe + lima_pipe_pp;
+	struct lima_ip *ip = dev->ip + lima_ip_bcast;
+	int i, mask = 0;
+
+	for (i = 0; i < pipe->num_processor; i++) {
+		struct lima_ip *pp = pipe->processor[i];
+		mask |= 1 << (pp->id - lima_ip_pp0);
+	}
 
-	dev_info(dev->dev, "bcast %x %x\n",
-		 bcast_read(BROADCAST_MASK),
-		 bcast_read(INTERRUPT_MASK));
+	bcast_write(BROADCAST_MASK, (mask << 16) | mask);
+	bcast_write(INTERRUPT_MASK, mask);
+}
+
+void lima_bcast_disable(struct lima_device *dev)
+{
+	struct lima_ip *ip = dev->ip + lima_ip_bcast;
 
+	bcast_write(BROADCAST_MASK, 0);
+	bcast_write(INTERRUPT_MASK, 0);
+}
+
+int lima_bcast_init(struct lima_ip *ip)
+{
 	return 0;
 }
 
diff --git a/drivers/gpu/drm/lima/lima_bcast.h b/drivers/gpu/drm/lima/lima_bcast.h
index f2c67b8..88c2687 100644
--- a/drivers/gpu/drm/lima/lima_bcast.h
+++ b/drivers/gpu/drm/lima/lima_bcast.h
@@ -28,4 +28,7 @@ struct lima_ip;
 int lima_bcast_init(struct lima_ip *ip);
 void lima_bcast_fini(struct lima_ip *ip);
 
+void lima_bcast_enable(struct lima_device *dev);
+void lima_bcast_disable(struct lima_device *dev);
+
 #endif
diff --git a/drivers/gpu/drm/lima/lima_device.c b/drivers/gpu/drm/lima/lima_device.c
index cb21969..d6ef632 100644
--- a/drivers/gpu/drm/lima/lima_device.c
+++ b/drivers/gpu/drm/lima/lima_device.c
@@ -74,7 +74,7 @@ static struct lima_ip_desc lima_ip_desc[lima_ip_num] = {
 	LIMA_IP_DESC(pp4,         false, false, -1,      0x28000, pp,       "pp4"),
 	LIMA_IP_DESC(pp5,         false, false, -1,      0x2A000, pp,       "pp5"),
 	LIMA_IP_DESC(pp6,         false, false, -1,      0x2C000, pp,       "pp6"),
-	LIMA_IP_DESC(pp7,         false, false, -1,      0x2D000, pp,       "pp7"),
+	LIMA_IP_DESC(pp7,         false, false, -1,      0x2E000, pp,       "pp7"),
 	LIMA_IP_DESC(gpmmu,       true,  true,  0x03000, 0x03000, mmu,      "gpmmu"),
 	LIMA_IP_DESC(ppmmu0,      true,  true,  0x04000, 0x04000, mmu,      "ppmmu0"),
 	LIMA_IP_DESC(ppmmu1,      false, false, 0x05000, 0x05000, mmu,      "ppmmu1"),
@@ -86,7 +86,7 @@ static struct lima_ip_desc lima_ip_desc[lima_ip_num] = {
 	LIMA_IP_DESC(ppmmu7,      false, false, -1,      0x1F000, mmu,      "ppmmu7"),
 	LIMA_IP_DESC(dlbu,        false, true,  -1,      0x14000, dlbu,     NULL),
 	LIMA_IP_DESC(bcast,       false, true,  -1,      0x13000, bcast,    NULL),
-	LIMA_IP_DESC(pp_bcast,    false, true,  -1,      0x16000, pp,       "pp"),
+	LIMA_IP_DESC(pp_bcast,    false, true,  -1,      0x16000, pp_bcast, "pp"),
 	LIMA_IP_DESC(ppmmu_bcast, false, true,  -1,      0x15000, mmu,      NULL),
 };
 
@@ -271,6 +271,11 @@ static int lima_init_pp_pipe(struct lima_device *dev)
 		}
 	}
 
+	if (dev->ip[lima_ip_bcast].present) {
+		pipe->bcast_processor = dev->ip + lima_ip_pp_bcast;
+		pipe->bcast_mmu = dev->ip + lima_ip_ppmmu_bcast;
+	}
+
 	if ((err = lima_pp_pipe_init(dev))) {
 		lima_sched_pipe_fini(pipe);
 		return err;
@@ -347,6 +352,11 @@ int lima_device_init(struct lima_device *ldev)
 	if (err)
 		goto err_out5;
 
+	if (ldev->id == lima_gpu_mali450) {
+		lima_dlbu_enable(ldev);
+		lima_bcast_enable(ldev);
+	}
+
 	return 0;
 
 err_out5:
diff --git a/drivers/gpu/drm/lima/lima_dlbu.c b/drivers/gpu/drm/lima/lima_dlbu.c
index 0e1b6ed..00f01f8 100644
--- a/drivers/gpu/drm/lima/lima_dlbu.c
+++ b/drivers/gpu/drm/lima/lima_dlbu.c
@@ -38,11 +38,39 @@
 #define dlbu_write(reg, data) writel(data, ip->iomem + LIMA_DLBU_##reg)
 #define dlbu_read(reg) readl(ip->iomem + LIMA_DLBU_##reg)
 
+void lima_dlbu_enable(struct lima_device *dev)
+{
+	struct lima_sched_pipe *pipe = dev->pipe + lima_pipe_pp;
+	struct lima_ip *ip = dev->ip + lima_ip_dlbu;
+	int i, mask = 0;
+
+	for (i = 0; i < pipe->num_processor; i++) {
+		struct lima_ip *pp = pipe->processor[i];
+		mask |= 1 << (pp->id - lima_ip_pp0);
+	}
+
+	dlbu_write(PP_ENABLE_MASK, mask);
+}
+
+void lima_dlbu_disable(struct lima_device *dev)
+{
+	struct lima_ip *ip = dev->ip + lima_ip_dlbu;
+	dlbu_write(PP_ENABLE_MASK, 0);
+}
+
+void lima_dlbu_set_reg(struct lima_ip *ip, u32 *reg)
+{
+	dlbu_write(TLLIST_VBASEADDR, reg[0]);
+	dlbu_write(FB_DIM, reg[1]);
+	dlbu_write(TLLIST_CONF, reg[2]);
+	dlbu_write(START_TILE_POS, reg[3]);
+}
+
 int lima_dlbu_init(struct lima_ip *ip)
 {
 	struct lima_device *dev = ip->dev;
 
-	dlbu_write(MASTER_TLLIST_PHYS_ADDR, dev->dlbu_dma);
+	dlbu_write(MASTER_TLLIST_PHYS_ADDR, dev->dlbu_dma | 1);
 	dlbu_write(MASTER_TLLIST_VADDR, LIMA_VA_RESERVE_DLBU);
 
 	return 0;
diff --git a/drivers/gpu/drm/lima/lima_dlbu.h b/drivers/gpu/drm/lima/lima_dlbu.h
index f696542..19c0fbb 100644
--- a/drivers/gpu/drm/lima/lima_dlbu.h
+++ b/drivers/gpu/drm/lima/lima_dlbu.h
@@ -24,6 +24,12 @@
 #define __LIMA_DLBU_H__
 
 struct lima_ip;
+struct lima_device;
+
+void lima_dlbu_enable(struct lima_device *dev);
+void lima_dlbu_disable(struct lima_device *dev);
+
+void lima_dlbu_set_reg(struct lima_ip *ip, u32 *reg);
 
 int lima_dlbu_init(struct lima_ip *ip);
 void lima_dlbu_fini(struct lima_ip *ip);
diff --git a/drivers/gpu/drm/lima/lima_pp.c b/drivers/gpu/drm/lima/lima_pp.c
index b2b73ec..7d8b0ab 100644
--- a/drivers/gpu/drm/lima/lima_pp.c
+++ b/drivers/gpu/drm/lima/lima_pp.c
@@ -29,6 +29,9 @@
 
 #include "lima_device.h"
 #include "lima_pp.h"
+#include "lima_dlbu.h"
+#include "lima_bcast.h"
+#include "lima_vm.h"
 
 #define LIMA_PP_FRAME                        0x0000
 #define LIMA_PP_RSW			     0x0004
@@ -113,17 +116,10 @@
 #define pp_write(reg, data) writel(data, ip->iomem + LIMA_PP_##reg)
 #define pp_read(reg) readl(ip->iomem + LIMA_PP_##reg)
 
-static irqreturn_t lima_pp_irq_handler(int irq, void *data)
+static void lima_pp_handle_irq(struct lima_ip *ip, u32 state)
 {
-	struct lima_ip *ip = data;
 	struct lima_device *dev = ip->dev;
 	struct lima_sched_pipe *pipe = dev->pipe + lima_pipe_pp;
-	u32 state = pp_read(INT_STATUS);
-	bool task_done = false;
-
-	/* for shared irq case */
-	if (!state)
-		return IRQ_NONE;
 
 	if (state & LIMA_PP_IRQ_MASK_ERROR) {
 		u32 status = pp_read(STATUS);
@@ -131,25 +127,71 @@ static irqreturn_t lima_pp_irq_handler(int irq, void *data)
 		dev_err(dev->dev, "pp error irq state=%x status=%x\n",
 			state, status);
 
-		task_done = true;
 		pipe->error = true;
 
 		/* mask all interrupts before hard reset */
 		pp_write(INT_MASK, 0);
 	}
-	else {
-		if (state & LIMA_PP_IRQ_END_OF_FRAME)
-			task_done = true;
-	}
 
 	pp_write(INT_CLEAR, state);
+}
+
+static irqreturn_t lima_pp_irq_handler(int irq, void *data)
+{
+	struct lima_ip *ip = data;
+	struct lima_device *dev = ip->dev;
+	struct lima_sched_pipe *pipe = dev->pipe + lima_pipe_pp;
+	u32 state = pp_read(INT_STATUS);
+
+	/* for shared irq case */
+	if (!state)
+		return IRQ_NONE;
+
+	lima_pp_handle_irq(ip, state);
 
-	if (task_done && atomic_dec_and_test(&pipe->task))
+	if (atomic_dec_and_test(&pipe->task))
 		lima_sched_pipe_task_done(pipe);
 
 	return IRQ_HANDLED;
 }
 
+static irqreturn_t lima_pp_bcast_irq_handler(int irq, void *data)
+{
+	int i;
+	irqreturn_t ret = IRQ_NONE;
+	struct lima_ip *pp_bcast = data;
+	struct lima_device *dev = pp_bcast->dev;
+	struct lima_sched_pipe *pipe = dev->pipe + lima_pipe_pp;
+
+	for (i = 0; i < pipe->num_processor; i++) {
+		struct lima_ip *ip = pipe->processor[i];
+		u32 status, state;
+
+		if (pipe->done & (1 << i))
+			continue;
+
+		/* status read first in case int state change in the middle
+		 * which may miss the interrupt handling */
+		status = pp_read(STATUS);
+		state = pp_read(INT_STATUS);
+
+		if (state) {
+			lima_pp_handle_irq(ip, state);
+			ret = IRQ_HANDLED;
+		}
+		else {
+			if (status & LIMA_PP_STATUS_RENDERING_ACTIVE)
+				continue;
+		}
+
+		pipe->done |= (1 << i);
+		if (atomic_dec_and_test(&pipe->task))
+			lima_sched_pipe_task_done(pipe);
+	}
+
+	return ret;
+}
+
 static void lima_pp_soft_reset_async(struct lima_ip *ip)
 {
 	if (ip->data.async_reset)
@@ -161,49 +203,65 @@ static void lima_pp_soft_reset_async(struct lima_ip *ip)
 	ip->data.async_reset = true;
 }
 
-static int lima_pp_soft_reset_async_wait(struct lima_ip *ip)
+static int lima_pp_soft_reset_async_wait_one(struct lima_ip *ip)
 {
 	struct lima_device *dev = ip->dev;
 	int timeout;
 
-	if (!ip->data.async_reset)
-		return 0;
-
 	for (timeout = 1000; timeout > 0; timeout--) {
 		if (!(pp_read(STATUS) & LIMA_PP_STATUS_RENDERING_ACTIVE) &&
 		    pp_read(INT_RAWSTAT) == LIMA_PP_IRQ_RESET_COMPLETED)
 			break;
 	}
 	if (!timeout) {
-		dev_err(dev->dev, "gp reset time out\n");
+		dev_err(dev->dev, "pp %s reset time out\n", lima_ip_name(ip));
 		return -ETIMEDOUT;
 	}
 
 	pp_write(INT_CLEAR, LIMA_PP_IRQ_MASK_ALL);
 	pp_write(INT_MASK, LIMA_PP_IRQ_MASK_USED);
+	return 0;
+}
+
+static int lima_pp_soft_reset_async_wait(struct lima_ip *ip)
+{
+	int i, err = 0;
+
+	if (!ip->data.async_reset)
+		return 0;
+
+	if (ip->id == lima_ip_pp_bcast) {
+		struct lima_device *dev = ip->dev;
+		struct lima_sched_pipe *pipe = dev->pipe + lima_pipe_pp;
+		for (i = 0; i < pipe->num_processor; i++)
+			err |= lima_pp_soft_reset_async_wait_one(pipe->processor[i]);
+	}
+	else
+		err = lima_pp_soft_reset_async_wait_one(ip);
 
 	ip->data.async_reset = false;
-	return 0;
+	return err;
 }
 
-static void lima_pp_start_task(struct lima_ip *ip, int index,
-			       struct lima_sched_task *task)
+static void lima_pp_start_task(struct lima_ip *ip,
+			       struct drm_lima_pp_frame_reg *frame,
+			       struct drm_lima_pp_wb_reg *wb,
+			       bool skip_stack_addr)
 {
-	struct drm_lima_m400_pp_frame *frame = task->frame;
-	u32 *frame_reg = (void *)&frame->frame;
 	const int num_frame_reg = 23, num_wb_reg = 12;
 	int i, j;
 
-	lima_pp_soft_reset_async_wait(ip);
+	for (i = 0; i < num_frame_reg; i++) {
+		u32 *frame_reg = (void *)frame;
 
-	frame->frame.plbu_array_address = frame->plbu_array_address[index];
-	frame->frame.fragment_stack_address = frame->fragment_stack_address[index];
+		if (skip_stack_addr && i * 4 == LIMA_PP_STACK)
+			continue;
 
-	for (i = 0; i < num_frame_reg; i++)
 		writel(frame_reg[i], ip->iomem + LIMA_PP_FRAME + i * 4);
+	}
 
 	for (i = 0; i < 3; i++) {
-		u32 *wb_reg = (void *)&frame->wb[i];
+		u32 *wb_reg = (void *)(wb + i);
 		for (j = 0; j < num_wb_reg; j++)
 			writel(wb_reg[j], ip->iomem + LIMA_PP_WB(i) + j * 4);
 	}
@@ -269,9 +327,6 @@ int lima_pp_init(struct lima_ip *ip)
 	struct lima_device *dev = ip->dev;
 	int err;
 
-	if (ip->id == lima_ip_pp_bcast)
-		return 0;
-
 	lima_pp_print_version(ip);
 
 	ip->data.async_reset = false;
@@ -296,13 +351,36 @@ void lima_pp_fini(struct lima_ip *ip)
 	
 }
 
+int lima_pp_bcast_init(struct lima_ip *ip)
+{
+	struct lima_device *dev = ip->dev;
+	int err;
+
+	err = devm_request_irq(dev->dev, ip->irq, lima_pp_bcast_irq_handler,
+			       IRQF_SHARED, lima_ip_name(ip), ip);
+	if (err) {
+		dev_err(dev->dev, "pp %s fail to request irq\n",
+			lima_ip_name(ip));
+		return err;
+	}
+
+	return 0;
+}
+
+void lima_pp_bcast_fini(struct lima_ip *ip)
+{
+	
+}
+
 static int lima_pp_task_validate(struct lima_sched_pipe *pipe,
 				 struct lima_sched_task *task)
 {
-	struct drm_lima_m400_pp_frame *f = task->frame;
+	if (!pipe->bcast_processor) {
+		struct drm_lima_m400_pp_frame *f = task->frame;
 
-	if (f->num_pp > pipe->num_processor)
-		return -EINVAL;
+		if (f->num_pp > pipe->num_processor)
+			return -EINVAL;
+	}
 
 	return 0;
 }
@@ -310,29 +388,71 @@ static int lima_pp_task_validate(struct lima_sched_pipe *pipe,
 static void lima_pp_task_run(struct lima_sched_pipe *pipe,
 			     struct lima_sched_task *task)
 {
-	struct drm_lima_m400_pp_frame *frame = task->frame;
-	int i;
+	if (pipe->bcast_processor) {
+		struct drm_lima_m450_pp_frame *frame = task->frame;
+		struct lima_device *dev = pipe->bcast_processor->dev;
+		int i;
+
+		pipe->done = 0;
+		atomic_set(&pipe->task, pipe->num_processor);
+
+		frame->frame.plbu_array_address = LIMA_VA_RESERVE_DLBU;
+		lima_dlbu_set_reg(dev->ip + lima_ip_dlbu, frame->dlbu_regs);
+
+		lima_pp_soft_reset_async_wait(pipe->bcast_processor);
+
+		for (i = 0; i < pipe->num_processor; i++) {
+			struct lima_ip *ip = pipe->processor[i];
+			pp_write(STACK, frame->fragment_stack_address[i]);
+		}
+
+		lima_pp_start_task(pipe->bcast_processor, &frame->frame,
+				   frame->wb, true);
+	}
+	else {
+		struct drm_lima_m400_pp_frame *frame = task->frame;
+		int i;
+
+		atomic_set(&pipe->task, frame->num_pp);
 
-	atomic_set(&pipe->task, frame->num_pp);
+		for (i = 0; i < frame->num_pp; i++) {
+			frame->frame.plbu_array_address =
+				frame->plbu_array_address[i];
+			frame->frame.fragment_stack_address =
+				frame->fragment_stack_address[i];
 
-	for (i = 0; i < frame->num_pp; i++)
-		lima_pp_start_task(pipe->processor[i], i, task);
+			lima_pp_soft_reset_async_wait(pipe->processor[i]);
+
+			lima_pp_start_task(pipe->processor[i],
+					   &frame->frame,
+					   frame->wb, false);
+		}
+	}
 }
 
 static void lima_pp_task_fini(struct lima_sched_pipe *pipe)
 {
-	int i;
-
-	for (i = 0; i < pipe->num_processor; i++)
-		lima_pp_soft_reset_async(pipe->processor[i]);
+	if (pipe->bcast_processor)
+		lima_pp_soft_reset_async(pipe->bcast_processor);
+	else {
+		int i;
+		for (i = 0; i < pipe->num_processor; i++)
+			lima_pp_soft_reset_async(pipe->processor[i]);
+	}
 }
 
 static void lima_pp_task_error(struct lima_sched_pipe *pipe)
 {
 	int i;
 
+	if (pipe->bcast_processor)
+		lima_bcast_disable(pipe->bcast_processor->dev);
+
 	for (i = 0; i < pipe->num_processor; i++)
 		lima_pp_hard_reset(pipe->processor[i]);
+
+	if (pipe->bcast_processor)
+		lima_bcast_enable(pipe->bcast_processor->dev);
 }
 
 static void lima_pp_task_mmu_error(struct lima_sched_pipe *pipe)
@@ -349,7 +469,11 @@ int lima_pp_pipe_init(struct lima_device *dev)
 	int frame_size;
 	struct lima_sched_pipe *pipe = dev->pipe + lima_pipe_pp;
 
-	frame_size = sizeof(struct drm_lima_m400_pp_frame);
+	if (dev->id == lima_gpu_mali400)
+		frame_size = sizeof(struct drm_lima_m400_pp_frame);
+	else
+		frame_size = sizeof(struct drm_lima_m450_pp_frame);
+
 	if (!lima_pp_task_slab) {
 		lima_pp_task_slab = kmem_cache_create(
 			"lima_pp_task", sizeof(struct lima_sched_task) + frame_size,
diff --git a/drivers/gpu/drm/lima/lima_pp.h b/drivers/gpu/drm/lima/lima_pp.h
index 92ad1b6..8ead0fd 100644
--- a/drivers/gpu/drm/lima/lima_pp.h
+++ b/drivers/gpu/drm/lima/lima_pp.h
@@ -28,6 +28,9 @@ struct lima_device;
 int lima_pp_init(struct lima_ip *ip);
 void lima_pp_fini(struct lima_ip *ip);
 
+int lima_pp_bcast_init(struct lima_ip *ip);
+void lima_pp_bcast_fini(struct lima_ip *ip);
+
 int lima_pp_pipe_init(struct lima_device *dev);
 void lima_pp_pipe_fini(struct lima_device *dev);
 
diff --git a/drivers/gpu/drm/lima/lima_sched.c b/drivers/gpu/drm/lima/lima_sched.c
index 7d3b1af..3f19ce25 100644
--- a/drivers/gpu/drm/lima/lima_sched.c
+++ b/drivers/gpu/drm/lima/lima_sched.c
@@ -383,8 +383,12 @@ static struct dma_fence *lima_sched_run_job(struct drm_sched_job *job)
 		pipe->current_vm = task->vm;
 	}
 
-	for (i = 0; i < pipe->num_mmu; i++)
-		lima_mmu_switch_vm(pipe->mmu[i], vm);
+	if (pipe->bcast_mmu)
+		lima_mmu_switch_vm(pipe->bcast_mmu, vm);
+	else {
+		for (i = 0; i < pipe->num_mmu; i++)
+			lima_mmu_switch_vm(pipe->mmu[i], vm);
+	}
 
 	if (last_vm)
 		lima_vm_put(last_vm);
@@ -398,15 +402,18 @@ static struct dma_fence *lima_sched_run_job(struct drm_sched_job *job)
 static void lima_sched_handle_error_task(struct lima_sched_pipe *pipe,
 					 struct lima_sched_task *task)
 {
-	int i;
-
 	kthread_park(pipe->base.thread);
 	drm_sched_hw_job_reset(&pipe->base, &task->base);
 
 	pipe->task_error(pipe);
 
-	for (i = 0; i < pipe->num_mmu; i++)
-		lima_mmu_page_fault_resume(pipe->mmu[i]);
+	if (pipe->bcast_mmu)
+		lima_mmu_page_fault_resume(pipe->bcast_mmu);
+	else {
+		int i;
+		for (i = 0; i < pipe->num_mmu; i++)
+			lima_mmu_page_fault_resume(pipe->mmu[i]);
+	}
 
 	if (pipe->current_vm)
 		lima_vm_put(pipe->current_vm);
diff --git a/drivers/gpu/drm/lima/lima_sched.h b/drivers/gpu/drm/lima/lima_sched.h
index 001bc81..062395b 100644
--- a/drivers/gpu/drm/lima/lima_sched.h
+++ b/drivers/gpu/drm/lima/lima_sched.h
@@ -72,6 +72,10 @@ struct lima_sched_pipe {
 	struct lima_ip *processor[LIMA_SCHED_PIPE_MAX_PROCESSOR];
 	int num_processor;
 
+	struct lima_ip *bcast_processor;
+	struct lima_ip *bcast_mmu;
+
+	u32 done;
 	bool error;
 	atomic_t task;
 
diff --git a/drivers/gpu/drm/lima/lima_vm.h b/drivers/gpu/drm/lima/lima_vm.h
index 52669173..518e12a 100644
--- a/drivers/gpu/drm/lima/lima_vm.h
+++ b/drivers/gpu/drm/lima/lima_vm.h
@@ -30,7 +30,7 @@
 #define LIMA_PAGE_MASK    (LIMA_PAGE_SIZE - 1)
 #define LIMA_PAGE_ENT_NUM (LIMA_PAGE_SIZE / sizeof(u32))
 
-#define LIMA_VA_RESERVE_START  0xFFFFF000
+#define LIMA_VA_RESERVE_START  0xFFF00000
 #define LIMA_VA_RESERVE_DLBU   LIMA_VA_RESERVE_START
 #define LIMA_VA_RESERVE_END    0x100000000
 
diff --git a/include/uapi/drm/lima_drm.h b/include/uapi/drm/lima_drm.h
index 56fc019..158983d 100644
--- a/include/uapi/drm/lima_drm.h
+++ b/include/uapi/drm/lima_drm.h
@@ -78,7 +78,7 @@ struct drm_lima_m400_gp_frame {
 	__u32 tile_heap_end;
 };
 
-struct drm_lima_m400_pp_frame_reg {
+struct drm_lima_pp_frame_reg {
 	__u32 plbu_array_address;
 	__u32 render_address;
 	__u32 unused_0;
@@ -105,7 +105,7 @@ struct drm_lima_m400_pp_frame_reg {
 	__u32 _pad;
 };
 
-struct drm_lima_m400_pp_wb_reg {
+struct drm_lima_pp_wb_reg {
 	__u32 type;
 	__u32 address;
 	__u32 pixel_format;
@@ -121,14 +121,21 @@ struct drm_lima_m400_pp_wb_reg {
 };
 
 struct drm_lima_m400_pp_frame {
-	struct drm_lima_m400_pp_frame_reg frame;
-	struct drm_lima_m400_pp_wb_reg wb[3];
+	struct drm_lima_pp_frame_reg frame;
+	struct drm_lima_pp_wb_reg wb[3];
 	__u32 plbu_array_address[4];
 	__u32 fragment_stack_address[4];
 	__u32 num_pp;
 	__u32 _pad;
 };
 
+struct drm_lima_m450_pp_frame {
+	struct drm_lima_pp_frame_reg frame;
+	struct drm_lima_pp_wb_reg wb[3];
+	__u32 dlbu_regs[4];
+	__u32 fragment_stack_address[8];
+};
+
 #define LIMA_PIPE_GP  0x00
 #define LIMA_PIPE_PP  0x01
 
-- 
2.0.1

